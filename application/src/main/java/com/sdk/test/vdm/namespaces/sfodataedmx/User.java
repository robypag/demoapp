
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import com.sdk.test.vdm.namespaces.sfodataedmx.field.UserField;
import com.sdk.test.vdm.namespaces.sfodataedmx.link.UserLink;
import com.sdk.test.vdm.namespaces.sfodataedmx.link.UserOneToOneLink;
import com.sdk.test.vdm.namespaces.sfodataedmx.selectable.UserSelectable;
import com.sdk.test.vdm.services.SFODataEdmxService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>User</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class User
    extends VdmEntity<User>
{

    /**
     * Selector for all available fields of User.
     * 
     */
    public final static UserSelectable ALL_FIELDS = new UserSelectable() {


        @Nonnull
        @Override
        public String getFieldName() {
            return "*";
        }

        @Nonnull
        @Override
        public List<String> getSelections() {
            return Collections.singletonList("*");
        }

    }
    ;
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>addressLine1</b></p>
     * 
     * @return
     *     The addressLine1 contained in this entity.
     */
    @SerializedName("addressLine1")
    @JsonProperty("addressLine1")
    @Nullable
    @ODataField(odataName = "addressLine1")
    private String addressLine1;
    /**
     * Use with available fluent helpers to apply the <b>addressLine1</b> field to query operations.
     * 
     */
    public final static UserField<String> ADDRESS_LINE1 = new UserField<String>("addressLine1");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>addressLine2</b></p>
     * 
     * @return
     *     The addressLine2 contained in this entity.
     */
    @SerializedName("addressLine2")
    @JsonProperty("addressLine2")
    @Nullable
    @ODataField(odataName = "addressLine2")
    private String addressLine2;
    /**
     * Use with available fluent helpers to apply the <b>addressLine2</b> field to query operations.
     * 
     */
    public final static UserField<String> ADDRESS_LINE2 = new UserField<String>("addressLine2");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>assunzionegruppo</b></p>
     * 
     * @return
     *     The assunzionegruppo contained in this entity.
     */
    @SerializedName("assunzionegruppo")
    @JsonProperty("assunzionegruppo")
    @Nullable
    @ODataField(odataName = "assunzionegruppo")
    private String assunzionegruppo;
    /**
     * Use with available fluent helpers to apply the <b>assunzionegruppo</b> field to query operations.
     * 
     */
    public final static UserField<String> ASSUNZIONEGRUPPO = new UserField<String>("assunzionegruppo");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>businessPhone</b></p>
     * 
     * @return
     *     The businessPhone contained in this entity.
     */
    @SerializedName("businessPhone")
    @JsonProperty("businessPhone")
    @Nullable
    @ODataField(odataName = "businessPhone")
    private String businessPhone;
    /**
     * Use with available fluent helpers to apply the <b>businessPhone</b> field to query operations.
     * 
     */
    public final static UserField<String> BUSINESS_PHONE = new UserField<String>("businessPhone");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>city</b></p>
     * 
     * @return
     *     The city contained in this entity.
     */
    @SerializedName("city")
    @JsonProperty("city")
    @Nullable
    @ODataField(odataName = "city")
    private String city;
    /**
     * Use with available fluent helpers to apply the <b>city</b> field to query operations.
     * 
     */
    public final static UserField<String> CITY = new UserField<String>("city");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>companyExitDate</b></p>
     * 
     * @return
     *     The companyExitDate contained in this entity.
     */
    @SerializedName("companyExitDate")
    @JsonProperty("companyExitDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "companyExitDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime companyExitDate;
    /**
     * Use with available fluent helpers to apply the <b>companyExitDate</b> field to query operations.
     * 
     */
    public final static UserField<LocalDateTime> COMPANY_EXIT_DATE = new UserField<LocalDateTime>("companyExitDate");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>country</b></p>
     * 
     * @return
     *     The country contained in this entity.
     */
    @SerializedName("country")
    @JsonProperty("country")
    @Nullable
    @ODataField(odataName = "country")
    private String country;
    /**
     * Use with available fluent helpers to apply the <b>country</b> field to query operations.
     * 
     */
    public final static UserField<String> COUNTRY = new UserField<String>("country");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom01</b></p>
     * 
     * @return
     *     The custom01 contained in this entity.
     */
    @SerializedName("custom01")
    @JsonProperty("custom01")
    @Nullable
    @ODataField(odataName = "custom01")
    private String custom01;
    /**
     * Use with available fluent helpers to apply the <b>custom01</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM01 = new UserField<String>("custom01");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom02</b></p>
     * 
     * @return
     *     The custom02 contained in this entity.
     */
    @SerializedName("custom02")
    @JsonProperty("custom02")
    @Nullable
    @ODataField(odataName = "custom02")
    private String custom02;
    /**
     * Use with available fluent helpers to apply the <b>custom02</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM02 = new UserField<String>("custom02");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom03</b></p>
     * 
     * @return
     *     The custom03 contained in this entity.
     */
    @SerializedName("custom03")
    @JsonProperty("custom03")
    @Nullable
    @ODataField(odataName = "custom03")
    private String custom03;
    /**
     * Use with available fluent helpers to apply the <b>custom03</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM03 = new UserField<String>("custom03");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom04</b></p>
     * 
     * @return
     *     The custom04 contained in this entity.
     */
    @SerializedName("custom04")
    @JsonProperty("custom04")
    @Nullable
    @ODataField(odataName = "custom04")
    private String custom04;
    /**
     * Use with available fluent helpers to apply the <b>custom04</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM04 = new UserField<String>("custom04");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom05</b></p>
     * 
     * @return
     *     The custom05 contained in this entity.
     */
    @SerializedName("custom05")
    @JsonProperty("custom05")
    @Nullable
    @ODataField(odataName = "custom05")
    private String custom05;
    /**
     * Use with available fluent helpers to apply the <b>custom05</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM05 = new UserField<String>("custom05");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom06</b></p>
     * 
     * @return
     *     The custom06 contained in this entity.
     */
    @SerializedName("custom06")
    @JsonProperty("custom06")
    @Nullable
    @ODataField(odataName = "custom06")
    private String custom06;
    /**
     * Use with available fluent helpers to apply the <b>custom06</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM06 = new UserField<String>("custom06");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom07</b></p>
     * 
     * @return
     *     The custom07 contained in this entity.
     */
    @SerializedName("custom07")
    @JsonProperty("custom07")
    @Nullable
    @ODataField(odataName = "custom07")
    private String custom07;
    /**
     * Use with available fluent helpers to apply the <b>custom07</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM07 = new UserField<String>("custom07");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom08</b></p>
     * 
     * @return
     *     The custom08 contained in this entity.
     */
    @SerializedName("custom08")
    @JsonProperty("custom08")
    @Nullable
    @ODataField(odataName = "custom08")
    private String custom08;
    /**
     * Use with available fluent helpers to apply the <b>custom08</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM08 = new UserField<String>("custom08");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom09</b></p>
     * 
     * @return
     *     The custom09 contained in this entity.
     */
    @SerializedName("custom09")
    @JsonProperty("custom09")
    @Nullable
    @ODataField(odataName = "custom09")
    private String custom09;
    /**
     * Use with available fluent helpers to apply the <b>custom09</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM09 = new UserField<String>("custom09");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom10</b></p>
     * 
     * @return
     *     The custom10 contained in this entity.
     */
    @SerializedName("custom10")
    @JsonProperty("custom10")
    @Nullable
    @ODataField(odataName = "custom10")
    private String custom10;
    /**
     * Use with available fluent helpers to apply the <b>custom10</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM10 = new UserField<String>("custom10");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom11</b></p>
     * 
     * @return
     *     The custom11 contained in this entity.
     */
    @SerializedName("custom11")
    @JsonProperty("custom11")
    @Nullable
    @ODataField(odataName = "custom11")
    private String custom11;
    /**
     * Use with available fluent helpers to apply the <b>custom11</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM11 = new UserField<String>("custom11");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom12</b></p>
     * 
     * @return
     *     The custom12 contained in this entity.
     */
    @SerializedName("custom12")
    @JsonProperty("custom12")
    @Nullable
    @ODataField(odataName = "custom12")
    private String custom12;
    /**
     * Use with available fluent helpers to apply the <b>custom12</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM12 = new UserField<String>("custom12");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom13</b></p>
     * 
     * @return
     *     The custom13 contained in this entity.
     */
    @SerializedName("custom13")
    @JsonProperty("custom13")
    @Nullable
    @ODataField(odataName = "custom13")
    private String custom13;
    /**
     * Use with available fluent helpers to apply the <b>custom13</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM13 = new UserField<String>("custom13");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom14</b></p>
     * 
     * @return
     *     The custom14 contained in this entity.
     */
    @SerializedName("custom14")
    @JsonProperty("custom14")
    @Nullable
    @ODataField(odataName = "custom14")
    private String custom14;
    /**
     * Use with available fluent helpers to apply the <b>custom14</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM14 = new UserField<String>("custom14");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom15</b></p>
     * 
     * @return
     *     The custom15 contained in this entity.
     */
    @SerializedName("custom15")
    @JsonProperty("custom15")
    @Nullable
    @ODataField(odataName = "custom15")
    private String custom15;
    /**
     * Use with available fluent helpers to apply the <b>custom15</b> field to query operations.
     * 
     */
    public final static UserField<String> CUSTOM15 = new UserField<String>("custom15");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>dateOfBirth</b></p>
     * 
     * @return
     *     The dateOfBirth contained in this entity.
     */
    @SerializedName("dateOfBirth")
    @JsonProperty("dateOfBirth")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "dateOfBirth", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime dateOfBirth;
    /**
     * Use with available fluent helpers to apply the <b>dateOfBirth</b> field to query operations.
     * 
     */
    public final static UserField<LocalDateTime> DATE_OF_BIRTH = new UserField<LocalDateTime>("dateOfBirth");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>defaultFullName</b></p>
     * 
     * @return
     *     The defaultFullName contained in this entity.
     */
    @SerializedName("defaultFullName")
    @JsonProperty("defaultFullName")
    @Nullable
    @ODataField(odataName = "defaultFullName")
    private String defaultFullName;
    /**
     * Use with available fluent helpers to apply the <b>defaultFullName</b> field to query operations.
     * 
     */
    public final static UserField<String> DEFAULT_FULL_NAME = new UserField<String>("defaultFullName");
    /**
     * Constraints: Nullable, Maximum length: 32 <p>Original property name from the Odata EDM: <b>defaultLocale</b></p>
     * 
     * @return
     *     The defaultLocale contained in this entity.
     */
    @SerializedName("defaultLocale")
    @JsonProperty("defaultLocale")
    @Nullable
    @ODataField(odataName = "defaultLocale")
    private String defaultLocale;
    /**
     * Use with available fluent helpers to apply the <b>defaultLocale</b> field to query operations.
     * 
     */
    public final static UserField<String> DEFAULT_LOCALE = new UserField<String>("defaultLocale");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>department</b></p>
     * 
     * @return
     *     The department contained in this entity.
     */
    @SerializedName("department")
    @JsonProperty("department")
    @Nullable
    @ODataField(odataName = "department")
    private String department;
    /**
     * Use with available fluent helpers to apply the <b>department</b> field to query operations.
     * 
     */
    public final static UserField<String> DEPARTMENT = new UserField<String>("department");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>division</b></p>
     * 
     * @return
     *     The division contained in this entity.
     */
    @SerializedName("division")
    @JsonProperty("division")
    @Nullable
    @ODataField(odataName = "division")
    private String division;
    /**
     * Use with available fluent helpers to apply the <b>division</b> field to query operations.
     * 
     */
    public final static UserField<String> DIVISION = new UserField<String>("division");
    /**
     * Constraints: Nullable, Maximum length: 100 <p>Original property name from the Odata EDM: <b>email</b></p>
     * 
     * @return
     *     The email contained in this entity.
     */
    @SerializedName("email")
    @JsonProperty("email")
    @Nullable
    @ODataField(odataName = "email")
    private String email;
    /**
     * Use with available fluent helpers to apply the <b>email</b> field to query operations.
     * 
     */
    public final static UserField<String> EMAIL = new UserField<String>("email");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>empId</b></p>
     * 
     * @return
     *     The empId contained in this entity.
     */
    @SerializedName("empId")
    @JsonProperty("empId")
    @Nullable
    @ODataField(odataName = "empId")
    private String empId;
    /**
     * Use with available fluent helpers to apply the <b>empId</b> field to query operations.
     * 
     */
    public final static UserField<String> EMP_ID = new UserField<String>("empId");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>fax</b></p>
     * 
     * @return
     *     The fax contained in this entity.
     */
    @SerializedName("fax")
    @JsonProperty("fax")
    @Nullable
    @ODataField(odataName = "fax")
    private String fax;
    /**
     * Use with available fluent helpers to apply the <b>fax</b> field to query operations.
     * 
     */
    public final static UserField<String> FAX = new UserField<String>("fax");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>firstName</b></p>
     * 
     * @return
     *     The firstName contained in this entity.
     */
    @SerializedName("firstName")
    @JsonProperty("firstName")
    @Nullable
    @ODataField(odataName = "firstName")
    private String firstName;
    /**
     * Use with available fluent helpers to apply the <b>firstName</b> field to query operations.
     * 
     */
    public final static UserField<String> FIRST_NAME = new UserField<String>("firstName");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>gender</b></p>
     * 
     * @return
     *     The gender contained in this entity.
     */
    @SerializedName("gender")
    @JsonProperty("gender")
    @Nullable
    @ODataField(odataName = "gender")
    private String gender;
    /**
     * Use with available fluent helpers to apply the <b>gender</b> field to query operations.
     * 
     */
    public final static UserField<String> GENDER = new UserField<String>("gender");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>hireDate</b></p>
     * 
     * @return
     *     The hireDate contained in this entity.
     */
    @SerializedName("hireDate")
    @JsonProperty("hireDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "hireDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime hireDate;
    /**
     * Use with available fluent helpers to apply the <b>hireDate</b> field to query operations.
     * 
     */
    public final static UserField<LocalDateTime> HIRE_DATE = new UserField<LocalDateTime>("hireDate");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>impactOfLoss</b></p>
     * 
     * @return
     *     The impactOfLoss contained in this entity.
     */
    @SerializedName("impactOfLoss")
    @JsonProperty("impactOfLoss")
    @Nullable
    @ODataField(odataName = "impactOfLoss")
    private String impactOfLoss;
    /**
     * Use with available fluent helpers to apply the <b>impactOfLoss</b> field to query operations.
     * 
     */
    public final static UserField<String> IMPACT_OF_LOSS = new UserField<String>("impactOfLoss");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>jobCode</b></p>
     * 
     * @return
     *     The jobCode contained in this entity.
     */
    @SerializedName("jobCode")
    @JsonProperty("jobCode")
    @Nullable
    @ODataField(odataName = "jobCode")
    private String jobCode;
    /**
     * Use with available fluent helpers to apply the <b>jobCode</b> field to query operations.
     * 
     */
    public final static UserField<String> JOB_CODE = new UserField<String>("jobCode");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>jobFamily</b></p>
     * 
     * @return
     *     The jobFamily contained in this entity.
     */
    @SerializedName("jobFamily")
    @JsonProperty("jobFamily")
    @Nullable
    @ODataField(odataName = "jobFamily")
    private String jobFamily;
    /**
     * Use with available fluent helpers to apply the <b>jobFamily</b> field to query operations.
     * 
     */
    public final static UserField<String> JOB_FAMILY = new UserField<String>("jobFamily");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>jobLevel</b></p>
     * 
     * @return
     *     The jobLevel contained in this entity.
     */
    @SerializedName("jobLevel")
    @JsonProperty("jobLevel")
    @Nullable
    @ODataField(odataName = "jobLevel")
    private String jobLevel;
    /**
     * Use with available fluent helpers to apply the <b>jobLevel</b> field to query operations.
     * 
     */
    public final static UserField<String> JOB_LEVEL = new UserField<String>("jobLevel");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>jobRole</b></p>
     * 
     * @return
     *     The jobRole contained in this entity.
     */
    @SerializedName("jobRole")
    @JsonProperty("jobRole")
    @Nullable
    @ODataField(odataName = "jobRole")
    private String jobRole;
    /**
     * Use with available fluent helpers to apply the <b>jobRole</b> field to query operations.
     * 
     */
    public final static UserField<String> JOB_ROLE = new UserField<String>("jobRole");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastModified</b></p>
     * 
     * @return
     *     The lastModified contained in this entity.
     */
    @SerializedName("lastModified")
    @JsonProperty("lastModified")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "lastModified", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime lastModified;
    /**
     * Use with available fluent helpers to apply the <b>lastModified</b> field to query operations.
     * 
     */
    public final static UserField<LocalDateTime> LAST_MODIFIED = new UserField<LocalDateTime>("lastModified");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastModifiedDateTime</b></p>
     * 
     * @return
     *     The lastModifiedDateTime contained in this entity.
     */
    @SerializedName("lastModifiedDateTime")
    @JsonProperty("lastModifiedDateTime")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeAdapter.class)
    @ODataField(odataName = "lastModifiedDateTime", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeCalendarConverter.class)
    private ZonedDateTime lastModifiedDateTime;
    /**
     * Use with available fluent helpers to apply the <b>lastModifiedDateTime</b> field to query operations.
     * 
     */
    public final static UserField<ZonedDateTime> LAST_MODIFIED_DATE_TIME = new UserField<ZonedDateTime>("lastModifiedDateTime");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastModifiedWithTZ</b></p>
     * 
     * @return
     *     The lastModifiedWithTZ contained in this entity.
     */
    @SerializedName("lastModifiedWithTZ")
    @JsonProperty("lastModifiedWithTZ")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeAdapter.class)
    @ODataField(odataName = "lastModifiedWithTZ", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeCalendarConverter.class)
    private ZonedDateTime lastModifiedWithTZ;
    /**
     * Use with available fluent helpers to apply the <b>lastModifiedWithTZ</b> field to query operations.
     * 
     */
    public final static UserField<ZonedDateTime> LAST_MODIFIED_WITH_TZ = new UserField<ZonedDateTime>("lastModifiedWithTZ");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>lastName</b></p>
     * 
     * @return
     *     The lastName contained in this entity.
     */
    @SerializedName("lastName")
    @JsonProperty("lastName")
    @Nullable
    @ODataField(odataName = "lastName")
    private String lastName;
    /**
     * Use with available fluent helpers to apply the <b>lastName</b> field to query operations.
     * 
     */
    public final static UserField<String> LAST_NAME = new UserField<String>("lastName");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastReviewDate</b></p>
     * 
     * @return
     *     The lastReviewDate contained in this entity.
     */
    @SerializedName("lastReviewDate")
    @JsonProperty("lastReviewDate")
    @Nullable
    @ODataField(odataName = "lastReviewDate")
    private String lastReviewDate;
    /**
     * Use with available fluent helpers to apply the <b>lastReviewDate</b> field to query operations.
     * 
     */
    public final static UserField<String> LAST_REVIEW_DATE = new UserField<String>("lastReviewDate");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>location</b></p>
     * 
     * @return
     *     The location contained in this entity.
     */
    @SerializedName("location")
    @JsonProperty("location")
    @Nullable
    @ODataField(odataName = "location")
    private String location;
    /**
     * Use with available fluent helpers to apply the <b>location</b> field to query operations.
     * 
     */
    public final static UserField<String> LOCATION = new UserField<String>("location");
    /**
     * Constraints: Nullable, Maximum length: 8 <p>Original property name from the Odata EDM: <b>loginMethod</b></p>
     * 
     * @return
     *     The loginMethod contained in this entity.
     */
    @SerializedName("loginMethod")
    @JsonProperty("loginMethod")
    @Nullable
    @ODataField(odataName = "loginMethod")
    private String loginMethod;
    /**
     * Use with available fluent helpers to apply the <b>loginMethod</b> field to query operations.
     * 
     */
    public final static UserField<String> LOGIN_METHOD = new UserField<String>("loginMethod");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>mi</b></p>
     * 
     * @return
     *     The mi contained in this entity.
     */
    @SerializedName("mi")
    @JsonProperty("mi")
    @Nullable
    @ODataField(odataName = "mi")
    private String mi;
    /**
     * Use with available fluent helpers to apply the <b>mi</b> field to query operations.
     * 
     */
    public final static UserField<String> MI = new UserField<String>("mi");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>minority</b></p>
     * 
     * @return
     *     The minority contained in this entity.
     */
    @SerializedName("minority")
    @JsonProperty("minority")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "minority")
    private Boolean minority;
    /**
     * Use with available fluent helpers to apply the <b>minority</b> field to query operations.
     * 
     */
    public final static UserField<Boolean> MINORITY = new UserField<Boolean>("minority");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>onboardingId</b></p>
     * 
     * @return
     *     The onboardingId contained in this entity.
     */
    @SerializedName("onboardingId")
    @JsonProperty("onboardingId")
    @Nullable
    @ODataField(odataName = "onboardingId")
    private String onboardingId;
    /**
     * Use with available fluent helpers to apply the <b>onboardingId</b> field to query operations.
     * 
     */
    public final static UserField<String> ONBOARDING_ID = new UserField<String>("onboardingId");
    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>password</b></p>
     * 
     * @return
     *     The password contained in this entity.
     */
    @SerializedName("password")
    @JsonProperty("password")
    @Nullable
    @ODataField(odataName = "password")
    private String password;
    /**
     * Use with available fluent helpers to apply the <b>password</b> field to query operations.
     * 
     */
    public final static UserField<String> PASSWORD = new UserField<String>("password");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>reasonForLeaving</b></p>
     * 
     * @return
     *     The reasonForLeaving contained in this entity.
     */
    @SerializedName("reasonForLeaving")
    @JsonProperty("reasonForLeaving")
    @Nullable
    @ODataField(odataName = "reasonForLeaving")
    private String reasonForLeaving;
    /**
     * Use with available fluent helpers to apply the <b>reasonForLeaving</b> field to query operations.
     * 
     */
    public final static UserField<String> REASON_FOR_LEAVING = new UserField<String>("reasonForLeaving");
    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>reviewFreq</b></p>
     * 
     * @return
     *     The reviewFreq contained in this entity.
     */
    @SerializedName("reviewFreq")
    @JsonProperty("reviewFreq")
    @Nullable
    @ODataField(odataName = "reviewFreq")
    private String reviewFreq;
    /**
     * Use with available fluent helpers to apply the <b>reviewFreq</b> field to query operations.
     * 
     */
    public final static UserField<String> REVIEW_FREQ = new UserField<String>("reviewFreq");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>riskOfLoss</b></p>
     * 
     * @return
     *     The riskOfLoss contained in this entity.
     */
    @SerializedName("riskOfLoss")
    @JsonProperty("riskOfLoss")
    @Nullable
    @ODataField(odataName = "riskOfLoss")
    private String riskOfLoss;
    /**
     * Use with available fluent helpers to apply the <b>riskOfLoss</b> field to query operations.
     * 
     */
    public final static UserField<String> RISK_OF_LOSS = new UserField<String>("riskOfLoss");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>sciLastModified</b></p>
     * 
     * @return
     *     The sciLastModified contained in this entity.
     */
    @SerializedName("sciLastModified")
    @JsonProperty("sciLastModified")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeAdapter.class)
    @ODataField(odataName = "sciLastModified", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeCalendarConverter.class)
    private ZonedDateTime sciLastModified;
    /**
     * Use with available fluent helpers to apply the <b>sciLastModified</b> field to query operations.
     * 
     */
    public final static UserField<ZonedDateTime> SCI_LAST_MODIFIED = new UserField<ZonedDateTime>("sciLastModified");
    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>state</b></p>
     * 
     * @return
     *     The state contained in this entity.
     */
    @SerializedName("state")
    @JsonProperty("state")
    @Nullable
    @ODataField(odataName = "state")
    private String state;
    /**
     * Use with available fluent helpers to apply the <b>state</b> field to query operations.
     * 
     */
    public final static UserField<String> STATE = new UserField<String>("state");
    /**
     * Constraints: Not nullable, Maximum length: 17 <p>Original property name from the Odata EDM: <b>status</b></p>
     * 
     * @return
     *     The status contained in this entity.
     */
    @SerializedName("status")
    @JsonProperty("status")
    @Nullable
    @ODataField(odataName = "status")
    private String status;
    /**
     * Use with available fluent helpers to apply the <b>status</b> field to query operations.
     * 
     */
    public final static UserField<String> STATUS = new UserField<String>("status");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>teamMembersSize</b></p>
     * 
     * @return
     *     The teamMembersSize contained in this entity.
     */
    @SerializedName("teamMembersSize")
    @JsonProperty("teamMembersSize")
    @Nullable
    @ODataField(odataName = "teamMembersSize")
    private Integer teamMembersSize;
    /**
     * Use with available fluent helpers to apply the <b>teamMembersSize</b> field to query operations.
     * 
     */
    public final static UserField<Integer> TEAM_MEMBERS_SIZE = new UserField<Integer>("teamMembersSize");
    /**
     * Constraints: Nullable, Maximum length: 16 <p>Original property name from the Odata EDM: <b>timeZone</b></p>
     * 
     * @return
     *     The timeZone contained in this entity.
     */
    @SerializedName("timeZone")
    @JsonProperty("timeZone")
    @Nullable
    @ODataField(odataName = "timeZone")
    private String timeZone;
    /**
     * Use with available fluent helpers to apply the <b>timeZone</b> field to query operations.
     * 
     */
    public final static UserField<String> TIME_ZONE = new UserField<String>("timeZone");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @return
     *     The title contained in this entity.
     */
    @SerializedName("title")
    @JsonProperty("title")
    @Nullable
    @ODataField(odataName = "title")
    private String title;
    /**
     * Use with available fluent helpers to apply the <b>title</b> field to query operations.
     * 
     */
    public final static UserField<String> TITLE = new UserField<String>("title");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>totalTeamSize</b></p>
     * 
     * @return
     *     The totalTeamSize contained in this entity.
     */
    @SerializedName("totalTeamSize")
    @JsonProperty("totalTeamSize")
    @Nullable
    @ODataField(odataName = "totalTeamSize")
    private Long totalTeamSize;
    /**
     * Use with available fluent helpers to apply the <b>totalTeamSize</b> field to query operations.
     * 
     */
    public final static UserField<Long> TOTAL_TEAM_SIZE = new UserField<Long>("totalTeamSize");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 100 <p>Original property name from the Odata EDM: <b>userId</b></p>
     * 
     * @return
     *     The userId contained in this entity.
     */
    @Key
    @SerializedName("userId")
    @JsonProperty("userId")
    @Nullable
    @ODataField(odataName = "userId")
    private String userId;
    /**
     * Use with available fluent helpers to apply the <b>userId</b> field to query operations.
     * 
     */
    public final static UserField<String> USER_ID = new UserField<String>("userId");
    /**
     * Constraints: Nullable, Maximum length: 100 <p>Original property name from the Odata EDM: <b>username</b></p>
     * 
     * @return
     *     The username contained in this entity.
     */
    @SerializedName("username")
    @JsonProperty("username")
    @Nullable
    @ODataField(odataName = "username")
    private String username;
    /**
     * Use with available fluent helpers to apply the <b>username</b> field to query operations.
     * 
     */
    public final static UserField<String> USERNAME = new UserField<String>("username");
    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>zipCode</b></p>
     * 
     * @return
     *     The zipCode contained in this entity.
     */
    @SerializedName("zipCode")
    @JsonProperty("zipCode")
    @Nullable
    @ODataField(odataName = "zipCode")
    private String zipCode;
    /**
     * Use with available fluent helpers to apply the <b>zipCode</b> field to query operations.
     * 
     */
    public final static UserField<String> ZIP_CODE = new UserField<String>("zipCode");
    /**
     * Navigation property <b>customManager</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("customManager")
    @JsonProperty("customManager")
    @ODataField(odataName = "customManager")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toCustomManager;
    /**
     * Navigation property <b>customReports</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("customReports")
    @JsonProperty("customReports")
    @ODataField(odataName = "customReports")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toCustomReports;
    /**
     * Navigation property <b>directReports</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("directReports")
    @JsonProperty("directReports")
    @ODataField(odataName = "directReports")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toDirectReports;
    /**
     * Navigation property <b>hr</b> for <b>User</b> to single <b>User</b>.
     * 
     */
    @SerializedName("hr")
    @JsonProperty("hr")
    @ODataField(odataName = "hr")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private User toHr;
    /**
     * Navigation property <b>hrReports</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("hrReports")
    @JsonProperty("hrReports")
    @ODataField(odataName = "hrReports")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toHrReports;
    /**
     * Navigation property <b>impactOfLossNav</b> for <b>User</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("impactOfLossNav")
    @JsonProperty("impactOfLossNav")
    @ODataField(odataName = "impactOfLossNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toImpactOfLossNav;
    /**
     * Navigation property <b>manager</b> for <b>User</b> to single <b>User</b>.
     * 
     */
    @SerializedName("manager")
    @JsonProperty("manager")
    @ODataField(odataName = "manager")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private User toManager;
    /**
     * Navigation property <b>matrixManager</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("matrixManager")
    @JsonProperty("matrixManager")
    @ODataField(odataName = "matrixManager")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toMatrixManager;
    /**
     * Navigation property <b>matrixReports</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("matrixReports")
    @JsonProperty("matrixReports")
    @ODataField(odataName = "matrixReports")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toMatrixReports;
    /**
     * Navigation property <b>proxy</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("proxy")
    @JsonProperty("proxy")
    @ODataField(odataName = "proxy")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toProxy;
    /**
     * Navigation property <b>reasonForLeavingNav</b> for <b>User</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("reasonForLeavingNav")
    @JsonProperty("reasonForLeavingNav")
    @ODataField(odataName = "reasonForLeavingNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toReasonForLeavingNav;
    /**
     * Navigation property <b>riskOfLossNav</b> for <b>User</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("riskOfLossNav")
    @JsonProperty("riskOfLossNav")
    @ODataField(odataName = "riskOfLossNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toRiskOfLossNav;
    /**
     * Navigation property <b>secondManager</b> for <b>User</b> to single <b>User</b>.
     * 
     */
    @SerializedName("secondManager")
    @JsonProperty("secondManager")
    @ODataField(odataName = "secondManager")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private User toSecondManager;
    /**
     * Navigation property <b>secondReports</b> for <b>User</b> to multiple <b>User</b>.
     * 
     */
    @SerializedName("secondReports")
    @JsonProperty("secondReports")
    @ODataField(odataName = "secondReports")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<User> toSecondReports;
    /**
     * Use with available fluent helpers to apply the <b>customManager</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_CUSTOM_MANAGER = new UserLink<User>("customManager");
    /**
     * Use with available fluent helpers to apply the <b>customReports</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_CUSTOM_REPORTS = new UserLink<User>("customReports");
    /**
     * Use with available fluent helpers to apply the <b>directReports</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_DIRECT_REPORTS = new UserLink<User>("directReports");
    /**
     * Use with available fluent helpers to apply the <b>hr</b> navigation property to query operations.
     * 
     */
    public final static UserOneToOneLink<User> TO_HR = new UserOneToOneLink<User>("hr");
    /**
     * Use with available fluent helpers to apply the <b>hrReports</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_HR_REPORTS = new UserLink<User>("hrReports");
    /**
     * Use with available fluent helpers to apply the <b>impactOfLossNav</b> navigation property to query operations.
     * 
     */
    public final static UserOneToOneLink<PicklistOption> TO_IMPACT_OF_LOSS_NAV = new UserOneToOneLink<PicklistOption>("impactOfLossNav");
    /**
     * Use with available fluent helpers to apply the <b>manager</b> navigation property to query operations.
     * 
     */
    public final static UserOneToOneLink<User> TO_MANAGER = new UserOneToOneLink<User>("manager");
    /**
     * Use with available fluent helpers to apply the <b>matrixManager</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_MATRIX_MANAGER = new UserLink<User>("matrixManager");
    /**
     * Use with available fluent helpers to apply the <b>matrixReports</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_MATRIX_REPORTS = new UserLink<User>("matrixReports");
    /**
     * Use with available fluent helpers to apply the <b>proxy</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_PROXY = new UserLink<User>("proxy");
    /**
     * Use with available fluent helpers to apply the <b>reasonForLeavingNav</b> navigation property to query operations.
     * 
     */
    public final static UserOneToOneLink<PicklistOption> TO_REASON_FOR_LEAVING_NAV = new UserOneToOneLink<PicklistOption>("reasonForLeavingNav");
    /**
     * Use with available fluent helpers to apply the <b>riskOfLossNav</b> navigation property to query operations.
     * 
     */
    public final static UserOneToOneLink<PicklistOption> TO_RISK_OF_LOSS_NAV = new UserOneToOneLink<PicklistOption>("riskOfLossNav");
    /**
     * Use with available fluent helpers to apply the <b>secondManager</b> navigation property to query operations.
     * 
     */
    public final static UserOneToOneLink<User> TO_SECOND_MANAGER = new UserOneToOneLink<User>("secondManager");
    /**
     * Use with available fluent helpers to apply the <b>secondReports</b> navigation property to query operations.
     * 
     */
    public final static UserLink<User> TO_SECOND_REPORTS = new UserLink<User>("secondReports");

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<User> getType() {
        return User.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>addressLine1</b></p>
     * 
     * @param addressLine1
     *     The addressLine1 to set.
     */
    public void setAddressLine1(
        @Nullable
        final String addressLine1) {
        rememberChangedField("addressLine1", this.addressLine1);
        this.addressLine1 = addressLine1;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>addressLine2</b></p>
     * 
     * @param addressLine2
     *     The addressLine2 to set.
     */
    public void setAddressLine2(
        @Nullable
        final String addressLine2) {
        rememberChangedField("addressLine2", this.addressLine2);
        this.addressLine2 = addressLine2;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>assunzionegruppo</b></p>
     * 
     * @param assunzionegruppo
     *     The assunzionegruppo to set.
     */
    public void setAssunzionegruppo(
        @Nullable
        final String assunzionegruppo) {
        rememberChangedField("assunzionegruppo", this.assunzionegruppo);
        this.assunzionegruppo = assunzionegruppo;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>businessPhone</b></p>
     * 
     * @param businessPhone
     *     The businessPhone to set.
     */
    public void setBusinessPhone(
        @Nullable
        final String businessPhone) {
        rememberChangedField("businessPhone", this.businessPhone);
        this.businessPhone = businessPhone;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>city</b></p>
     * 
     * @param city
     *     The city to set.
     */
    public void setCity(
        @Nullable
        final String city) {
        rememberChangedField("city", this.city);
        this.city = city;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>companyExitDate</b></p>
     * 
     * @param companyExitDate
     *     The companyExitDate to set.
     */
    public void setCompanyExitDate(
        @Nullable
        final LocalDateTime companyExitDate) {
        rememberChangedField("companyExitDate", this.companyExitDate);
        this.companyExitDate = companyExitDate;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>country</b></p>
     * 
     * @param country
     *     The country to set.
     */
    public void setCountry(
        @Nullable
        final String country) {
        rememberChangedField("country", this.country);
        this.country = country;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom01</b></p>
     * 
     * @param custom01
     *     The custom01 to set.
     */
    public void setCustom01(
        @Nullable
        final String custom01) {
        rememberChangedField("custom01", this.custom01);
        this.custom01 = custom01;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom02</b></p>
     * 
     * @param custom02
     *     The custom02 to set.
     */
    public void setCustom02(
        @Nullable
        final String custom02) {
        rememberChangedField("custom02", this.custom02);
        this.custom02 = custom02;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom03</b></p>
     * 
     * @param custom03
     *     The custom03 to set.
     */
    public void setCustom03(
        @Nullable
        final String custom03) {
        rememberChangedField("custom03", this.custom03);
        this.custom03 = custom03;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom04</b></p>
     * 
     * @param custom04
     *     The custom04 to set.
     */
    public void setCustom04(
        @Nullable
        final String custom04) {
        rememberChangedField("custom04", this.custom04);
        this.custom04 = custom04;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom05</b></p>
     * 
     * @param custom05
     *     The custom05 to set.
     */
    public void setCustom05(
        @Nullable
        final String custom05) {
        rememberChangedField("custom05", this.custom05);
        this.custom05 = custom05;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom06</b></p>
     * 
     * @param custom06
     *     The custom06 to set.
     */
    public void setCustom06(
        @Nullable
        final String custom06) {
        rememberChangedField("custom06", this.custom06);
        this.custom06 = custom06;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom07</b></p>
     * 
     * @param custom07
     *     The custom07 to set.
     */
    public void setCustom07(
        @Nullable
        final String custom07) {
        rememberChangedField("custom07", this.custom07);
        this.custom07 = custom07;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom08</b></p>
     * 
     * @param custom08
     *     The custom08 to set.
     */
    public void setCustom08(
        @Nullable
        final String custom08) {
        rememberChangedField("custom08", this.custom08);
        this.custom08 = custom08;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom09</b></p>
     * 
     * @param custom09
     *     The custom09 to set.
     */
    public void setCustom09(
        @Nullable
        final String custom09) {
        rememberChangedField("custom09", this.custom09);
        this.custom09 = custom09;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom10</b></p>
     * 
     * @param custom10
     *     The custom10 to set.
     */
    public void setCustom10(
        @Nullable
        final String custom10) {
        rememberChangedField("custom10", this.custom10);
        this.custom10 = custom10;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom11</b></p>
     * 
     * @param custom11
     *     The custom11 to set.
     */
    public void setCustom11(
        @Nullable
        final String custom11) {
        rememberChangedField("custom11", this.custom11);
        this.custom11 = custom11;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom12</b></p>
     * 
     * @param custom12
     *     The custom12 to set.
     */
    public void setCustom12(
        @Nullable
        final String custom12) {
        rememberChangedField("custom12", this.custom12);
        this.custom12 = custom12;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom13</b></p>
     * 
     * @param custom13
     *     The custom13 to set.
     */
    public void setCustom13(
        @Nullable
        final String custom13) {
        rememberChangedField("custom13", this.custom13);
        this.custom13 = custom13;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom14</b></p>
     * 
     * @param custom14
     *     The custom14 to set.
     */
    public void setCustom14(
        @Nullable
        final String custom14) {
        rememberChangedField("custom14", this.custom14);
        this.custom14 = custom14;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>custom15</b></p>
     * 
     * @param custom15
     *     The custom15 to set.
     */
    public void setCustom15(
        @Nullable
        final String custom15) {
        rememberChangedField("custom15", this.custom15);
        this.custom15 = custom15;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>dateOfBirth</b></p>
     * 
     * @param dateOfBirth
     *     The dateOfBirth to set.
     */
    public void setDateOfBirth(
        @Nullable
        final LocalDateTime dateOfBirth) {
        rememberChangedField("dateOfBirth", this.dateOfBirth);
        this.dateOfBirth = dateOfBirth;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>defaultFullName</b></p>
     * 
     * @param defaultFullName
     *     The defaultFullName to set.
     */
    public void setDefaultFullName(
        @Nullable
        final String defaultFullName) {
        rememberChangedField("defaultFullName", this.defaultFullName);
        this.defaultFullName = defaultFullName;
    }

    /**
     * Constraints: Nullable, Maximum length: 32 <p>Original property name from the Odata EDM: <b>defaultLocale</b></p>
     * 
     * @param defaultLocale
     *     The defaultLocale to set.
     */
    public void setDefaultLocale(
        @Nullable
        final String defaultLocale) {
        rememberChangedField("defaultLocale", this.defaultLocale);
        this.defaultLocale = defaultLocale;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>department</b></p>
     * 
     * @param department
     *     The department to set.
     */
    public void setDepartment(
        @Nullable
        final String department) {
        rememberChangedField("department", this.department);
        this.department = department;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>division</b></p>
     * 
     * @param division
     *     The division to set.
     */
    public void setDivision(
        @Nullable
        final String division) {
        rememberChangedField("division", this.division);
        this.division = division;
    }

    /**
     * Constraints: Nullable, Maximum length: 100 <p>Original property name from the Odata EDM: <b>email</b></p>
     * 
     * @param email
     *     The email to set.
     */
    public void setEmail(
        @Nullable
        final String email) {
        rememberChangedField("email", this.email);
        this.email = email;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>empId</b></p>
     * 
     * @param empId
     *     The empId to set.
     */
    public void setEmpId(
        @Nullable
        final String empId) {
        rememberChangedField("empId", this.empId);
        this.empId = empId;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>fax</b></p>
     * 
     * @param fax
     *     The fax to set.
     */
    public void setFax(
        @Nullable
        final String fax) {
        rememberChangedField("fax", this.fax);
        this.fax = fax;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>firstName</b></p>
     * 
     * @param firstName
     *     The firstName to set.
     */
    public void setFirstName(
        @Nullable
        final String firstName) {
        rememberChangedField("firstName", this.firstName);
        this.firstName = firstName;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>gender</b></p>
     * 
     * @param gender
     *     The gender to set.
     */
    public void setGender(
        @Nullable
        final String gender) {
        rememberChangedField("gender", this.gender);
        this.gender = gender;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>hireDate</b></p>
     * 
     * @param hireDate
     *     The hireDate to set.
     */
    public void setHireDate(
        @Nullable
        final LocalDateTime hireDate) {
        rememberChangedField("hireDate", this.hireDate);
        this.hireDate = hireDate;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>impactOfLoss</b></p>
     * 
     * @param impactOfLoss
     *     The impactOfLoss to set.
     */
    public void setImpactOfLoss(
        @Nullable
        final String impactOfLoss) {
        rememberChangedField("impactOfLoss", this.impactOfLoss);
        this.impactOfLoss = impactOfLoss;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>jobCode</b></p>
     * 
     * @param jobCode
     *     The jobCode to set.
     */
    public void setJobCode(
        @Nullable
        final String jobCode) {
        rememberChangedField("jobCode", this.jobCode);
        this.jobCode = jobCode;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>jobFamily</b></p>
     * 
     * @param jobFamily
     *     The jobFamily to set.
     */
    public void setJobFamily(
        @Nullable
        final String jobFamily) {
        rememberChangedField("jobFamily", this.jobFamily);
        this.jobFamily = jobFamily;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>jobLevel</b></p>
     * 
     * @param jobLevel
     *     The jobLevel to set.
     */
    public void setJobLevel(
        @Nullable
        final String jobLevel) {
        rememberChangedField("jobLevel", this.jobLevel);
        this.jobLevel = jobLevel;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>jobRole</b></p>
     * 
     * @param jobRole
     *     The jobRole to set.
     */
    public void setJobRole(
        @Nullable
        final String jobRole) {
        rememberChangedField("jobRole", this.jobRole);
        this.jobRole = jobRole;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastModified</b></p>
     * 
     * @param lastModified
     *     The lastModified to set.
     */
    public void setLastModified(
        @Nullable
        final LocalDateTime lastModified) {
        rememberChangedField("lastModified", this.lastModified);
        this.lastModified = lastModified;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastModifiedDateTime</b></p>
     * 
     * @param lastModifiedDateTime
     *     The lastModifiedDateTime to set.
     */
    public void setLastModifiedDateTime(
        @Nullable
        final ZonedDateTime lastModifiedDateTime) {
        rememberChangedField("lastModifiedDateTime", this.lastModifiedDateTime);
        this.lastModifiedDateTime = lastModifiedDateTime;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastModifiedWithTZ</b></p>
     * 
     * @param lastModifiedWithTZ
     *     The lastModifiedWithTZ to set.
     */
    public void setLastModifiedWithTZ(
        @Nullable
        final ZonedDateTime lastModifiedWithTZ) {
        rememberChangedField("lastModifiedWithTZ", this.lastModifiedWithTZ);
        this.lastModifiedWithTZ = lastModifiedWithTZ;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>lastName</b></p>
     * 
     * @param lastName
     *     The lastName to set.
     */
    public void setLastName(
        @Nullable
        final String lastName) {
        rememberChangedField("lastName", this.lastName);
        this.lastName = lastName;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>lastReviewDate</b></p>
     * 
     * @param lastReviewDate
     *     The lastReviewDate to set.
     */
    public void setLastReviewDate(
        @Nullable
        final String lastReviewDate) {
        rememberChangedField("lastReviewDate", this.lastReviewDate);
        this.lastReviewDate = lastReviewDate;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>location</b></p>
     * 
     * @param location
     *     The location to set.
     */
    public void setLocation(
        @Nullable
        final String location) {
        rememberChangedField("location", this.location);
        this.location = location;
    }

    /**
     * Constraints: Nullable, Maximum length: 8 <p>Original property name from the Odata EDM: <b>loginMethod</b></p>
     * 
     * @param loginMethod
     *     The loginMethod to set.
     */
    public void setLoginMethod(
        @Nullable
        final String loginMethod) {
        rememberChangedField("loginMethod", this.loginMethod);
        this.loginMethod = loginMethod;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>mi</b></p>
     * 
     * @param mi
     *     The mi to set.
     */
    public void setMi(
        @Nullable
        final String mi) {
        rememberChangedField("mi", this.mi);
        this.mi = mi;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>minority</b></p>
     * 
     * @param minority
     *     The minority to set.
     */
    public void setMinority(
        @Nullable
        final Boolean minority) {
        rememberChangedField("minority", this.minority);
        this.minority = minority;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>onboardingId</b></p>
     * 
     * @param onboardingId
     *     The onboardingId to set.
     */
    public void setOnboardingId(
        @Nullable
        final String onboardingId) {
        rememberChangedField("onboardingId", this.onboardingId);
        this.onboardingId = onboardingId;
    }

    /**
     * Constraints: Nullable, Maximum length: 128 <p>Original property name from the Odata EDM: <b>password</b></p>
     * 
     * @param password
     *     The password to set.
     */
    public void setPassword(
        @Nullable
        final String password) {
        rememberChangedField("password", this.password);
        this.password = password;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>reasonForLeaving</b></p>
     * 
     * @param reasonForLeaving
     *     The reasonForLeaving to set.
     */
    public void setReasonForLeaving(
        @Nullable
        final String reasonForLeaving) {
        rememberChangedField("reasonForLeaving", this.reasonForLeaving);
        this.reasonForLeaving = reasonForLeaving;
    }

    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>reviewFreq</b></p>
     * 
     * @param reviewFreq
     *     The reviewFreq to set.
     */
    public void setReviewFreq(
        @Nullable
        final String reviewFreq) {
        rememberChangedField("reviewFreq", this.reviewFreq);
        this.reviewFreq = reviewFreq;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>riskOfLoss</b></p>
     * 
     * @param riskOfLoss
     *     The riskOfLoss to set.
     */
    public void setRiskOfLoss(
        @Nullable
        final String riskOfLoss) {
        rememberChangedField("riskOfLoss", this.riskOfLoss);
        this.riskOfLoss = riskOfLoss;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>sciLastModified</b></p>
     * 
     * @param sciLastModified
     *     The sciLastModified to set.
     */
    public void setSciLastModified(
        @Nullable
        final ZonedDateTime sciLastModified) {
        rememberChangedField("sciLastModified", this.sciLastModified);
        this.sciLastModified = sciLastModified;
    }

    /**
     * Constraints: Nullable, Maximum length: 20 <p>Original property name from the Odata EDM: <b>state</b></p>
     * 
     * @param state
     *     The state to set.
     */
    public void setState(
        @Nullable
        final String state) {
        rememberChangedField("state", this.state);
        this.state = state;
    }

    /**
     * Constraints: Not nullable, Maximum length: 17 <p>Original property name from the Odata EDM: <b>status</b></p>
     * 
     * @param status
     *     The status to set.
     */
    public void setStatus(
        @Nullable
        final String status) {
        rememberChangedField("status", this.status);
        this.status = status;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>teamMembersSize</b></p>
     * 
     * @param teamMembersSize
     *     The teamMembersSize to set.
     */
    public void setTeamMembersSize(
        @Nullable
        final Integer teamMembersSize) {
        rememberChangedField("teamMembersSize", this.teamMembersSize);
        this.teamMembersSize = teamMembersSize;
    }

    /**
     * Constraints: Nullable, Maximum length: 16 <p>Original property name from the Odata EDM: <b>timeZone</b></p>
     * 
     * @param timeZone
     *     The timeZone to set.
     */
    public void setTimeZone(
        @Nullable
        final String timeZone) {
        rememberChangedField("timeZone", this.timeZone);
        this.timeZone = timeZone;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>title</b></p>
     * 
     * @param title
     *     The title to set.
     */
    public void setTitle(
        @Nullable
        final String title) {
        rememberChangedField("title", this.title);
        this.title = title;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>totalTeamSize</b></p>
     * 
     * @param totalTeamSize
     *     The totalTeamSize to set.
     */
    public void setTotalTeamSize(
        @Nullable
        final Long totalTeamSize) {
        rememberChangedField("totalTeamSize", this.totalTeamSize);
        this.totalTeamSize = totalTeamSize;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 100 <p>Original property name from the Odata EDM: <b>userId</b></p>
     * 
     * @param userId
     *     The userId to set.
     */
    public void setUserId(
        @Nullable
        final String userId) {
        rememberChangedField("userId", this.userId);
        this.userId = userId;
    }

    /**
     * Constraints: Nullable, Maximum length: 100 <p>Original property name from the Odata EDM: <b>username</b></p>
     * 
     * @param username
     *     The username to set.
     */
    public void setUsername(
        @Nullable
        final String username) {
        rememberChangedField("username", this.username);
        this.username = username;
    }

    /**
     * Constraints: Nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>zipCode</b></p>
     * 
     * @param zipCode
     *     The zipCode to set.
     */
    public void setZipCode(
        @Nullable
        final String zipCode) {
        rememberChangedField("zipCode", this.zipCode);
        this.zipCode = zipCode;
    }

    @Override
    protected String getEntityCollection() {
        return "User";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("userId", getUserId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("addressLine1", getAddressLine1());
        values.put("addressLine2", getAddressLine2());
        values.put("assunzionegruppo", getAssunzionegruppo());
        values.put("businessPhone", getBusinessPhone());
        values.put("city", getCity());
        values.put("companyExitDate", getCompanyExitDate());
        values.put("country", getCountry());
        values.put("custom01", getCustom01());
        values.put("custom02", getCustom02());
        values.put("custom03", getCustom03());
        values.put("custom04", getCustom04());
        values.put("custom05", getCustom05());
        values.put("custom06", getCustom06());
        values.put("custom07", getCustom07());
        values.put("custom08", getCustom08());
        values.put("custom09", getCustom09());
        values.put("custom10", getCustom10());
        values.put("custom11", getCustom11());
        values.put("custom12", getCustom12());
        values.put("custom13", getCustom13());
        values.put("custom14", getCustom14());
        values.put("custom15", getCustom15());
        values.put("dateOfBirth", getDateOfBirth());
        values.put("defaultFullName", getDefaultFullName());
        values.put("defaultLocale", getDefaultLocale());
        values.put("department", getDepartment());
        values.put("division", getDivision());
        values.put("email", getEmail());
        values.put("empId", getEmpId());
        values.put("fax", getFax());
        values.put("firstName", getFirstName());
        values.put("gender", getGender());
        values.put("hireDate", getHireDate());
        values.put("impactOfLoss", getImpactOfLoss());
        values.put("jobCode", getJobCode());
        values.put("jobFamily", getJobFamily());
        values.put("jobLevel", getJobLevel());
        values.put("jobRole", getJobRole());
        values.put("lastModified", getLastModified());
        values.put("lastModifiedDateTime", getLastModifiedDateTime());
        values.put("lastModifiedWithTZ", getLastModifiedWithTZ());
        values.put("lastName", getLastName());
        values.put("lastReviewDate", getLastReviewDate());
        values.put("location", getLocation());
        values.put("loginMethod", getLoginMethod());
        values.put("mi", getMi());
        values.put("minority", getMinority());
        values.put("onboardingId", getOnboardingId());
        values.put("password", getPassword());
        values.put("reasonForLeaving", getReasonForLeaving());
        values.put("reviewFreq", getReviewFreq());
        values.put("riskOfLoss", getRiskOfLoss());
        values.put("sciLastModified", getSciLastModified());
        values.put("state", getState());
        values.put("status", getStatus());
        values.put("teamMembersSize", getTeamMembersSize());
        values.put("timeZone", getTimeZone());
        values.put("title", getTitle());
        values.put("totalTeamSize", getTotalTeamSize());
        values.put("userId", getUserId());
        values.put("username", getUsername());
        values.put("zipCode", getZipCode());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("addressLine1")) {
                final Object value = values.remove("addressLine1");
                if ((value == null)||(!value.equals(getAddressLine1()))) {
                    setAddressLine1(((String) value));
                }
            }
            if (values.containsKey("addressLine2")) {
                final Object value = values.remove("addressLine2");
                if ((value == null)||(!value.equals(getAddressLine2()))) {
                    setAddressLine2(((String) value));
                }
            }
            if (values.containsKey("assunzionegruppo")) {
                final Object value = values.remove("assunzionegruppo");
                if ((value == null)||(!value.equals(getAssunzionegruppo()))) {
                    setAssunzionegruppo(((String) value));
                }
            }
            if (values.containsKey("businessPhone")) {
                final Object value = values.remove("businessPhone");
                if ((value == null)||(!value.equals(getBusinessPhone()))) {
                    setBusinessPhone(((String) value));
                }
            }
            if (values.containsKey("city")) {
                final Object value = values.remove("city");
                if ((value == null)||(!value.equals(getCity()))) {
                    setCity(((String) value));
                }
            }
            if (values.containsKey("companyExitDate")) {
                final Object value = values.remove("companyExitDate");
                if ((value == null)||(!value.equals(getCompanyExitDate()))) {
                    setCompanyExitDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("country")) {
                final Object value = values.remove("country");
                if ((value == null)||(!value.equals(getCountry()))) {
                    setCountry(((String) value));
                }
            }
            if (values.containsKey("custom01")) {
                final Object value = values.remove("custom01");
                if ((value == null)||(!value.equals(getCustom01()))) {
                    setCustom01(((String) value));
                }
            }
            if (values.containsKey("custom02")) {
                final Object value = values.remove("custom02");
                if ((value == null)||(!value.equals(getCustom02()))) {
                    setCustom02(((String) value));
                }
            }
            if (values.containsKey("custom03")) {
                final Object value = values.remove("custom03");
                if ((value == null)||(!value.equals(getCustom03()))) {
                    setCustom03(((String) value));
                }
            }
            if (values.containsKey("custom04")) {
                final Object value = values.remove("custom04");
                if ((value == null)||(!value.equals(getCustom04()))) {
                    setCustom04(((String) value));
                }
            }
            if (values.containsKey("custom05")) {
                final Object value = values.remove("custom05");
                if ((value == null)||(!value.equals(getCustom05()))) {
                    setCustom05(((String) value));
                }
            }
            if (values.containsKey("custom06")) {
                final Object value = values.remove("custom06");
                if ((value == null)||(!value.equals(getCustom06()))) {
                    setCustom06(((String) value));
                }
            }
            if (values.containsKey("custom07")) {
                final Object value = values.remove("custom07");
                if ((value == null)||(!value.equals(getCustom07()))) {
                    setCustom07(((String) value));
                }
            }
            if (values.containsKey("custom08")) {
                final Object value = values.remove("custom08");
                if ((value == null)||(!value.equals(getCustom08()))) {
                    setCustom08(((String) value));
                }
            }
            if (values.containsKey("custom09")) {
                final Object value = values.remove("custom09");
                if ((value == null)||(!value.equals(getCustom09()))) {
                    setCustom09(((String) value));
                }
            }
            if (values.containsKey("custom10")) {
                final Object value = values.remove("custom10");
                if ((value == null)||(!value.equals(getCustom10()))) {
                    setCustom10(((String) value));
                }
            }
            if (values.containsKey("custom11")) {
                final Object value = values.remove("custom11");
                if ((value == null)||(!value.equals(getCustom11()))) {
                    setCustom11(((String) value));
                }
            }
            if (values.containsKey("custom12")) {
                final Object value = values.remove("custom12");
                if ((value == null)||(!value.equals(getCustom12()))) {
                    setCustom12(((String) value));
                }
            }
            if (values.containsKey("custom13")) {
                final Object value = values.remove("custom13");
                if ((value == null)||(!value.equals(getCustom13()))) {
                    setCustom13(((String) value));
                }
            }
            if (values.containsKey("custom14")) {
                final Object value = values.remove("custom14");
                if ((value == null)||(!value.equals(getCustom14()))) {
                    setCustom14(((String) value));
                }
            }
            if (values.containsKey("custom15")) {
                final Object value = values.remove("custom15");
                if ((value == null)||(!value.equals(getCustom15()))) {
                    setCustom15(((String) value));
                }
            }
            if (values.containsKey("dateOfBirth")) {
                final Object value = values.remove("dateOfBirth");
                if ((value == null)||(!value.equals(getDateOfBirth()))) {
                    setDateOfBirth(((LocalDateTime) value));
                }
            }
            if (values.containsKey("defaultFullName")) {
                final Object value = values.remove("defaultFullName");
                if ((value == null)||(!value.equals(getDefaultFullName()))) {
                    setDefaultFullName(((String) value));
                }
            }
            if (values.containsKey("defaultLocale")) {
                final Object value = values.remove("defaultLocale");
                if ((value == null)||(!value.equals(getDefaultLocale()))) {
                    setDefaultLocale(((String) value));
                }
            }
            if (values.containsKey("department")) {
                final Object value = values.remove("department");
                if ((value == null)||(!value.equals(getDepartment()))) {
                    setDepartment(((String) value));
                }
            }
            if (values.containsKey("division")) {
                final Object value = values.remove("division");
                if ((value == null)||(!value.equals(getDivision()))) {
                    setDivision(((String) value));
                }
            }
            if (values.containsKey("email")) {
                final Object value = values.remove("email");
                if ((value == null)||(!value.equals(getEmail()))) {
                    setEmail(((String) value));
                }
            }
            if (values.containsKey("empId")) {
                final Object value = values.remove("empId");
                if ((value == null)||(!value.equals(getEmpId()))) {
                    setEmpId(((String) value));
                }
            }
            if (values.containsKey("fax")) {
                final Object value = values.remove("fax");
                if ((value == null)||(!value.equals(getFax()))) {
                    setFax(((String) value));
                }
            }
            if (values.containsKey("firstName")) {
                final Object value = values.remove("firstName");
                if ((value == null)||(!value.equals(getFirstName()))) {
                    setFirstName(((String) value));
                }
            }
            if (values.containsKey("gender")) {
                final Object value = values.remove("gender");
                if ((value == null)||(!value.equals(getGender()))) {
                    setGender(((String) value));
                }
            }
            if (values.containsKey("hireDate")) {
                final Object value = values.remove("hireDate");
                if ((value == null)||(!value.equals(getHireDate()))) {
                    setHireDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("impactOfLoss")) {
                final Object value = values.remove("impactOfLoss");
                if ((value == null)||(!value.equals(getImpactOfLoss()))) {
                    setImpactOfLoss(((String) value));
                }
            }
            if (values.containsKey("jobCode")) {
                final Object value = values.remove("jobCode");
                if ((value == null)||(!value.equals(getJobCode()))) {
                    setJobCode(((String) value));
                }
            }
            if (values.containsKey("jobFamily")) {
                final Object value = values.remove("jobFamily");
                if ((value == null)||(!value.equals(getJobFamily()))) {
                    setJobFamily(((String) value));
                }
            }
            if (values.containsKey("jobLevel")) {
                final Object value = values.remove("jobLevel");
                if ((value == null)||(!value.equals(getJobLevel()))) {
                    setJobLevel(((String) value));
                }
            }
            if (values.containsKey("jobRole")) {
                final Object value = values.remove("jobRole");
                if ((value == null)||(!value.equals(getJobRole()))) {
                    setJobRole(((String) value));
                }
            }
            if (values.containsKey("lastModified")) {
                final Object value = values.remove("lastModified");
                if ((value == null)||(!value.equals(getLastModified()))) {
                    setLastModified(((LocalDateTime) value));
                }
            }
            if (values.containsKey("lastModifiedDateTime")) {
                final Object value = values.remove("lastModifiedDateTime");
                if ((value == null)||(!value.equals(getLastModifiedDateTime()))) {
                    setLastModifiedDateTime(((ZonedDateTime) value));
                }
            }
            if (values.containsKey("lastModifiedWithTZ")) {
                final Object value = values.remove("lastModifiedWithTZ");
                if ((value == null)||(!value.equals(getLastModifiedWithTZ()))) {
                    setLastModifiedWithTZ(((ZonedDateTime) value));
                }
            }
            if (values.containsKey("lastName")) {
                final Object value = values.remove("lastName");
                if ((value == null)||(!value.equals(getLastName()))) {
                    setLastName(((String) value));
                }
            }
            if (values.containsKey("lastReviewDate")) {
                final Object value = values.remove("lastReviewDate");
                if ((value == null)||(!value.equals(getLastReviewDate()))) {
                    setLastReviewDate(((String) value));
                }
            }
            if (values.containsKey("location")) {
                final Object value = values.remove("location");
                if ((value == null)||(!value.equals(getLocation()))) {
                    setLocation(((String) value));
                }
            }
            if (values.containsKey("loginMethod")) {
                final Object value = values.remove("loginMethod");
                if ((value == null)||(!value.equals(getLoginMethod()))) {
                    setLoginMethod(((String) value));
                }
            }
            if (values.containsKey("mi")) {
                final Object value = values.remove("mi");
                if ((value == null)||(!value.equals(getMi()))) {
                    setMi(((String) value));
                }
            }
            if (values.containsKey("minority")) {
                final Object value = values.remove("minority");
                if ((value == null)||(!value.equals(getMinority()))) {
                    setMinority(((Boolean) value));
                }
            }
            if (values.containsKey("onboardingId")) {
                final Object value = values.remove("onboardingId");
                if ((value == null)||(!value.equals(getOnboardingId()))) {
                    setOnboardingId(((String) value));
                }
            }
            if (values.containsKey("password")) {
                final Object value = values.remove("password");
                if ((value == null)||(!value.equals(getPassword()))) {
                    setPassword(((String) value));
                }
            }
            if (values.containsKey("reasonForLeaving")) {
                final Object value = values.remove("reasonForLeaving");
                if ((value == null)||(!value.equals(getReasonForLeaving()))) {
                    setReasonForLeaving(((String) value));
                }
            }
            if (values.containsKey("reviewFreq")) {
                final Object value = values.remove("reviewFreq");
                if ((value == null)||(!value.equals(getReviewFreq()))) {
                    setReviewFreq(((String) value));
                }
            }
            if (values.containsKey("riskOfLoss")) {
                final Object value = values.remove("riskOfLoss");
                if ((value == null)||(!value.equals(getRiskOfLoss()))) {
                    setRiskOfLoss(((String) value));
                }
            }
            if (values.containsKey("sciLastModified")) {
                final Object value = values.remove("sciLastModified");
                if ((value == null)||(!value.equals(getSciLastModified()))) {
                    setSciLastModified(((ZonedDateTime) value));
                }
            }
            if (values.containsKey("state")) {
                final Object value = values.remove("state");
                if ((value == null)||(!value.equals(getState()))) {
                    setState(((String) value));
                }
            }
            if (values.containsKey("status")) {
                final Object value = values.remove("status");
                if ((value == null)||(!value.equals(getStatus()))) {
                    setStatus(((String) value));
                }
            }
            if (values.containsKey("teamMembersSize")) {
                final Object value = values.remove("teamMembersSize");
                if ((value == null)||(!value.equals(getTeamMembersSize()))) {
                    setTeamMembersSize(((Integer) value));
                }
            }
            if (values.containsKey("timeZone")) {
                final Object value = values.remove("timeZone");
                if ((value == null)||(!value.equals(getTimeZone()))) {
                    setTimeZone(((String) value));
                }
            }
            if (values.containsKey("title")) {
                final Object value = values.remove("title");
                if ((value == null)||(!value.equals(getTitle()))) {
                    setTitle(((String) value));
                }
            }
            if (values.containsKey("totalTeamSize")) {
                final Object value = values.remove("totalTeamSize");
                if ((value == null)||(!value.equals(getTotalTeamSize()))) {
                    setTotalTeamSize(((Long) value));
                }
            }
            if (values.containsKey("userId")) {
                final Object value = values.remove("userId");
                if ((value == null)||(!value.equals(getUserId()))) {
                    setUserId(((String) value));
                }
            }
            if (values.containsKey("username")) {
                final Object value = values.remove("username");
                if ((value == null)||(!value.equals(getUsername()))) {
                    setUsername(((String) value));
                }
            }
            if (values.containsKey("zipCode")) {
                final Object value = values.remove("zipCode");
                if ((value == null)||(!value.equals(getZipCode()))) {
                    setZipCode(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("customManager")) {
                final Object value = (values).remove("customManager");
                if (value instanceof Iterable) {
                    if (toCustomManager == null) {
                        toCustomManager = Lists.newArrayList();
                    } else {
                        toCustomManager = Lists.newArrayList(toCustomManager);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toCustomManager.size()>i) {
                            entity = toCustomManager.get(i);
                        } else {
                            entity = new User();
                            toCustomManager.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("customReports")) {
                final Object value = (values).remove("customReports");
                if (value instanceof Iterable) {
                    if (toCustomReports == null) {
                        toCustomReports = Lists.newArrayList();
                    } else {
                        toCustomReports = Lists.newArrayList(toCustomReports);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toCustomReports.size()>i) {
                            entity = toCustomReports.get(i);
                        } else {
                            entity = new User();
                            toCustomReports.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("directReports")) {
                final Object value = (values).remove("directReports");
                if (value instanceof Iterable) {
                    if (toDirectReports == null) {
                        toDirectReports = Lists.newArrayList();
                    } else {
                        toDirectReports = Lists.newArrayList(toDirectReports);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toDirectReports.size()>i) {
                            entity = toDirectReports.get(i);
                        } else {
                            entity = new User();
                            toDirectReports.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("hr")) {
                final Object value = (values).remove("hr");
                if (value instanceof Map) {
                    if (toHr == null) {
                        toHr = new User();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toHr.fromMap(inputMap);
                }
            }
            if ((values).containsKey("hrReports")) {
                final Object value = (values).remove("hrReports");
                if (value instanceof Iterable) {
                    if (toHrReports == null) {
                        toHrReports = Lists.newArrayList();
                    } else {
                        toHrReports = Lists.newArrayList(toHrReports);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toHrReports.size()>i) {
                            entity = toHrReports.get(i);
                        } else {
                            entity = new User();
                            toHrReports.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("impactOfLossNav")) {
                final Object value = (values).remove("impactOfLossNav");
                if (value instanceof Map) {
                    if (toImpactOfLossNav == null) {
                        toImpactOfLossNav = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toImpactOfLossNav.fromMap(inputMap);
                }
            }
            if ((values).containsKey("manager")) {
                final Object value = (values).remove("manager");
                if (value instanceof Map) {
                    if (toManager == null) {
                        toManager = new User();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toManager.fromMap(inputMap);
                }
            }
            if ((values).containsKey("matrixManager")) {
                final Object value = (values).remove("matrixManager");
                if (value instanceof Iterable) {
                    if (toMatrixManager == null) {
                        toMatrixManager = Lists.newArrayList();
                    } else {
                        toMatrixManager = Lists.newArrayList(toMatrixManager);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toMatrixManager.size()>i) {
                            entity = toMatrixManager.get(i);
                        } else {
                            entity = new User();
                            toMatrixManager.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("matrixReports")) {
                final Object value = (values).remove("matrixReports");
                if (value instanceof Iterable) {
                    if (toMatrixReports == null) {
                        toMatrixReports = Lists.newArrayList();
                    } else {
                        toMatrixReports = Lists.newArrayList(toMatrixReports);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toMatrixReports.size()>i) {
                            entity = toMatrixReports.get(i);
                        } else {
                            entity = new User();
                            toMatrixReports.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("proxy")) {
                final Object value = (values).remove("proxy");
                if (value instanceof Iterable) {
                    if (toProxy == null) {
                        toProxy = Lists.newArrayList();
                    } else {
                        toProxy = Lists.newArrayList(toProxy);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toProxy.size()>i) {
                            entity = toProxy.get(i);
                        } else {
                            entity = new User();
                            toProxy.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("reasonForLeavingNav")) {
                final Object value = (values).remove("reasonForLeavingNav");
                if (value instanceof Map) {
                    if (toReasonForLeavingNav == null) {
                        toReasonForLeavingNav = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toReasonForLeavingNav.fromMap(inputMap);
                }
            }
            if ((values).containsKey("riskOfLossNav")) {
                final Object value = (values).remove("riskOfLossNav");
                if (value instanceof Map) {
                    if (toRiskOfLossNav == null) {
                        toRiskOfLossNav = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toRiskOfLossNav.fromMap(inputMap);
                }
            }
            if ((values).containsKey("secondManager")) {
                final Object value = (values).remove("secondManager");
                if (value instanceof Map) {
                    if (toSecondManager == null) {
                        toSecondManager = new User();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toSecondManager.fromMap(inputMap);
                }
            }
            if ((values).containsKey("secondReports")) {
                final Object value = (values).remove("secondReports");
                if (value instanceof Iterable) {
                    if (toSecondReports == null) {
                        toSecondReports = Lists.newArrayList();
                    } else {
                        toSecondReports = Lists.newArrayList(toSecondReports);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        User entity;
                        if (toSecondReports.size()>i) {
                            entity = toSecondReports.get(i);
                        } else {
                            entity = new User();
                            toSecondReports.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >UserField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new UserField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >UserField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new UserField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return SFODataEdmxService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toCustomManager!= null) {
            (values).put("customManager", toCustomManager);
        }
        if (toCustomReports!= null) {
            (values).put("customReports", toCustomReports);
        }
        if (toDirectReports!= null) {
            (values).put("directReports", toDirectReports);
        }
        if (toHr!= null) {
            (values).put("hr", toHr);
        }
        if (toHrReports!= null) {
            (values).put("hrReports", toHrReports);
        }
        if (toImpactOfLossNav!= null) {
            (values).put("impactOfLossNav", toImpactOfLossNav);
        }
        if (toManager!= null) {
            (values).put("manager", toManager);
        }
        if (toMatrixManager!= null) {
            (values).put("matrixManager", toMatrixManager);
        }
        if (toMatrixReports!= null) {
            (values).put("matrixReports", toMatrixReports);
        }
        if (toProxy!= null) {
            (values).put("proxy", toProxy);
        }
        if (toReasonForLeavingNav!= null) {
            (values).put("reasonForLeavingNav", toReasonForLeavingNav);
        }
        if (toRiskOfLossNav!= null) {
            (values).put("riskOfLossNav", toRiskOfLossNav);
        }
        if (toSecondManager!= null) {
            (values).put("secondManager", toSecondManager);
        }
        if (toSecondReports!= null) {
            (values).put("secondReports", toSecondReports);
        }
        return values;
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>customManager</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchCustomManager()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("customManager");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>customManager</b>.
     * <p>
     * If the navigation property <b>customManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getCustomManagerOrFetch()
        throws ODataException
    {
        if (toCustomManager == null) {
            toCustomManager = fetchCustomManager();
        }
        return toCustomManager;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>customManager</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>customManager</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getCustomManagerIfPresent() {
        return Option.of(toCustomManager);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>customManager</b>.
     * <p>
     * If the navigation property <b>customManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setCustomManager(
        @Nonnull
        final List<User> value) {
        if (toCustomManager == null) {
            toCustomManager = Lists.newArrayList();
        }
        toCustomManager.clear();
        toCustomManager.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>customManager</b>.
     * <p>
     * If the navigation property <b>customManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addCustomManager(User... entity) {
        if (toCustomManager == null) {
            toCustomManager = Lists.newArrayList();
        }
        toCustomManager.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>customReports</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchCustomReports()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("customReports");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>customReports</b>.
     * <p>
     * If the navigation property <b>customReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getCustomReportsOrFetch()
        throws ODataException
    {
        if (toCustomReports == null) {
            toCustomReports = fetchCustomReports();
        }
        return toCustomReports;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>customReports</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>customReports</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getCustomReportsIfPresent() {
        return Option.of(toCustomReports);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>customReports</b>.
     * <p>
     * If the navigation property <b>customReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setCustomReports(
        @Nonnull
        final List<User> value) {
        if (toCustomReports == null) {
            toCustomReports = Lists.newArrayList();
        }
        toCustomReports.clear();
        toCustomReports.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>customReports</b>.
     * <p>
     * If the navigation property <b>customReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addCustomReports(User... entity) {
        if (toCustomReports == null) {
            toCustomReports = Lists.newArrayList();
        }
        toCustomReports.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>directReports</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchDirectReports()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("directReports");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>directReports</b>.
     * <p>
     * If the navigation property <b>directReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getDirectReportsOrFetch()
        throws ODataException
    {
        if (toDirectReports == null) {
            toDirectReports = fetchDirectReports();
        }
        return toDirectReports;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>directReports</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>directReports</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getDirectReportsIfPresent() {
        return Option.of(toDirectReports);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>directReports</b>.
     * <p>
     * If the navigation property <b>directReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setDirectReports(
        @Nonnull
        final List<User> value) {
        if (toDirectReports == null) {
            toDirectReports = Lists.newArrayList();
        }
        toDirectReports.clear();
        toDirectReports.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>directReports</b>.
     * <p>
     * If the navigation property <b>directReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addDirectReports(User... entity) {
        if (toDirectReports == null) {
            toDirectReports = Lists.newArrayList();
        }
        toDirectReports.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>User</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>hr</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>User</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User fetchHr()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("hr");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final User entity = result.as(User.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>hr</b>.
     * <p>
     * If the navigation property <b>hr</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User getHrOrFetch()
        throws ODataException
    {
        if (toHr == null) {
            toHr = fetchHr();
        }
        return toHr;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>hr</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>hr</b> is already loaded, the result will contain the <b>User</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<User> getHrIfPresent() {
        return Option.of(toHr);
    }

    /**
     * Overwrites the associated <b>User</b> entity for the loaded navigation property <b>hr</b>.
     * 
     * @param value
     *     New <b>User</b> entity.
     */
    public void setHr(final User value) {
        toHr = value;
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>hrReports</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchHrReports()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("hrReports");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>hrReports</b>.
     * <p>
     * If the navigation property <b>hrReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getHrReportsOrFetch()
        throws ODataException
    {
        if (toHrReports == null) {
            toHrReports = fetchHrReports();
        }
        return toHrReports;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>hrReports</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>hrReports</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getHrReportsIfPresent() {
        return Option.of(toHrReports);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>hrReports</b>.
     * <p>
     * If the navigation property <b>hrReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setHrReports(
        @Nonnull
        final List<User> value) {
        if (toHrReports == null) {
            toHrReports = Lists.newArrayList();
        }
        toHrReports.clear();
        toHrReports.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>hrReports</b>.
     * <p>
     * If the navigation property <b>hrReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addHrReports(User... entity) {
        if (toHrReports == null) {
            toHrReports = Lists.newArrayList();
        }
        toHrReports.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>impactOfLossNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchImpactOfLossNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("impactOfLossNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>impactOfLossNav</b>.
     * <p>
     * If the navigation property <b>impactOfLossNav</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getImpactOfLossNavOrFetch()
        throws ODataException
    {
        if (toImpactOfLossNav == null) {
            toImpactOfLossNav = fetchImpactOfLossNav();
        }
        return toImpactOfLossNav;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>impactOfLossNav</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>impactOfLossNav</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getImpactOfLossNavIfPresent() {
        return Option.of(toImpactOfLossNav);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>impactOfLossNav</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setImpactOfLossNav(final PicklistOption value) {
        toImpactOfLossNav = value;
    }

    /**
     * Fetches the <b>User</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>manager</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>User</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User fetchManager()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("manager");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final User entity = result.as(User.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>manager</b>.
     * <p>
     * If the navigation property <b>manager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User getManagerOrFetch()
        throws ODataException
    {
        if (toManager == null) {
            toManager = fetchManager();
        }
        return toManager;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>manager</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>manager</b> is already loaded, the result will contain the <b>User</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<User> getManagerIfPresent() {
        return Option.of(toManager);
    }

    /**
     * Overwrites the associated <b>User</b> entity for the loaded navigation property <b>manager</b>.
     * 
     * @param value
     *     New <b>User</b> entity.
     */
    public void setManager(final User value) {
        toManager = value;
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>matrixManager</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchMatrixManager()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("matrixManager");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>matrixManager</b>.
     * <p>
     * If the navigation property <b>matrixManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getMatrixManagerOrFetch()
        throws ODataException
    {
        if (toMatrixManager == null) {
            toMatrixManager = fetchMatrixManager();
        }
        return toMatrixManager;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>matrixManager</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>matrixManager</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getMatrixManagerIfPresent() {
        return Option.of(toMatrixManager);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>matrixManager</b>.
     * <p>
     * If the navigation property <b>matrixManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setMatrixManager(
        @Nonnull
        final List<User> value) {
        if (toMatrixManager == null) {
            toMatrixManager = Lists.newArrayList();
        }
        toMatrixManager.clear();
        toMatrixManager.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>matrixManager</b>.
     * <p>
     * If the navigation property <b>matrixManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addMatrixManager(User... entity) {
        if (toMatrixManager == null) {
            toMatrixManager = Lists.newArrayList();
        }
        toMatrixManager.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>matrixReports</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchMatrixReports()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("matrixReports");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>matrixReports</b>.
     * <p>
     * If the navigation property <b>matrixReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getMatrixReportsOrFetch()
        throws ODataException
    {
        if (toMatrixReports == null) {
            toMatrixReports = fetchMatrixReports();
        }
        return toMatrixReports;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>matrixReports</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>matrixReports</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getMatrixReportsIfPresent() {
        return Option.of(toMatrixReports);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>matrixReports</b>.
     * <p>
     * If the navigation property <b>matrixReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setMatrixReports(
        @Nonnull
        final List<User> value) {
        if (toMatrixReports == null) {
            toMatrixReports = Lists.newArrayList();
        }
        toMatrixReports.clear();
        toMatrixReports.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>matrixReports</b>.
     * <p>
     * If the navigation property <b>matrixReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addMatrixReports(User... entity) {
        if (toMatrixReports == null) {
            toMatrixReports = Lists.newArrayList();
        }
        toMatrixReports.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>proxy</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchProxy()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("proxy");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>proxy</b>.
     * <p>
     * If the navigation property <b>proxy</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getProxyOrFetch()
        throws ODataException
    {
        if (toProxy == null) {
            toProxy = fetchProxy();
        }
        return toProxy;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>proxy</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>proxy</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getProxyIfPresent() {
        return Option.of(toProxy);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>proxy</b>.
     * <p>
     * If the navigation property <b>proxy</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setProxy(
        @Nonnull
        final List<User> value) {
        if (toProxy == null) {
            toProxy = Lists.newArrayList();
        }
        toProxy.clear();
        toProxy.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>proxy</b>.
     * <p>
     * If the navigation property <b>proxy</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addProxy(User... entity) {
        if (toProxy == null) {
            toProxy = Lists.newArrayList();
        }
        toProxy.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>reasonForLeavingNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchReasonForLeavingNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("reasonForLeavingNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>reasonForLeavingNav</b>.
     * <p>
     * If the navigation property <b>reasonForLeavingNav</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getReasonForLeavingNavOrFetch()
        throws ODataException
    {
        if (toReasonForLeavingNav == null) {
            toReasonForLeavingNav = fetchReasonForLeavingNav();
        }
        return toReasonForLeavingNav;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>reasonForLeavingNav</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>reasonForLeavingNav</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getReasonForLeavingNavIfPresent() {
        return Option.of(toReasonForLeavingNav);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>reasonForLeavingNav</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setReasonForLeavingNav(final PicklistOption value) {
        toReasonForLeavingNav = value;
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>riskOfLossNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchRiskOfLossNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("riskOfLossNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>riskOfLossNav</b>.
     * <p>
     * If the navigation property <b>riskOfLossNav</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getRiskOfLossNavOrFetch()
        throws ODataException
    {
        if (toRiskOfLossNav == null) {
            toRiskOfLossNav = fetchRiskOfLossNav();
        }
        return toRiskOfLossNav;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>riskOfLossNav</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>riskOfLossNav</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getRiskOfLossNavIfPresent() {
        return Option.of(toRiskOfLossNav);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>riskOfLossNav</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setRiskOfLossNav(final PicklistOption value) {
        toRiskOfLossNav = value;
    }

    /**
     * Fetches the <b>User</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>secondManager</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>User</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User fetchSecondManager()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("secondManager");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final User entity = result.as(User.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>secondManager</b>.
     * <p>
     * If the navigation property <b>secondManager</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User getSecondManagerOrFetch()
        throws ODataException
    {
        if (toSecondManager == null) {
            toSecondManager = fetchSecondManager();
        }
        return toSecondManager;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>secondManager</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>secondManager</b> is already loaded, the result will contain the <b>User</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<User> getSecondManagerIfPresent() {
        return Option.of(toSecondManager);
    }

    /**
     * Overwrites the associated <b>User</b> entity for the loaded navigation property <b>secondManager</b>.
     * 
     * @param value
     *     New <b>User</b> entity.
     */
    public void setSecondManager(final User value) {
        toSecondManager = value;
    }

    /**
     * Fetches the <b>User</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>secondReports</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>User</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> fetchSecondReports()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("secondReports");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<User> entityList = result.asList(User.class);
        for (User entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>secondReports</b>.
     * <p>
     * If the navigation property <b>secondReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<User> getSecondReportsOrFetch()
        throws ODataException
    {
        if (toSecondReports == null) {
            toSecondReports = fetchSecondReports();
        }
        return toSecondReports;
    }

    /**
     * Retrieval of associated <b>User</b> entities (one to many). This corresponds to the OData navigation property <b>secondReports</b>.
     * <p>
     * If the navigation property for an entity <b>User</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>secondReports</b> is already loaded, the result will contain the <b>User</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<User>> getSecondReportsIfPresent() {
        return Option.of(toSecondReports);
    }

    /**
     * Overwrites the list of associated <b>User</b> entities for the loaded navigation property <b>secondReports</b>.
     * <p>
     * If the navigation property <b>secondReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>User</b> entities.
     */
    public void setSecondReports(
        @Nonnull
        final List<User> value) {
        if (toSecondReports == null) {
            toSecondReports = Lists.newArrayList();
        }
        toSecondReports.clear();
        toSecondReports.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>User</b> entities. This corresponds to the OData navigation property <b>secondReports</b>.
     * <p>
     * If the navigation property <b>secondReports</b> of a queried <b>User</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>User</b> entities.
     */
    public void addSecondReports(User... entity) {
        if (toSecondReports == null) {
            toSecondReports = Lists.newArrayList();
        }
        toSecondReports.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of User instances.
     * 
     */
    public final static class UserBuilder {

        private List<User> toCustomManager = Lists.newArrayList();
        private List<User> toCustomReports = Lists.newArrayList();
        private List<User> toDirectReports = Lists.newArrayList();
        private User toHr;
        private List<User> toHrReports = Lists.newArrayList();
        private PicklistOption toImpactOfLossNav;
        private User toManager;
        private List<User> toMatrixManager = Lists.newArrayList();
        private List<User> toMatrixReports = Lists.newArrayList();
        private List<User> toProxy = Lists.newArrayList();
        private PicklistOption toReasonForLeavingNav;
        private PicklistOption toRiskOfLossNav;
        private User toSecondManager;
        private List<User> toSecondReports = Lists.newArrayList();

        private User.UserBuilder toCustomManager(final List<User> value) {
            toCustomManager.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>customManager</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder customManager(User... value) {
            return toCustomManager(Lists.newArrayList(value));
        }

        private User.UserBuilder toCustomReports(final List<User> value) {
            toCustomReports.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>customReports</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder customReports(User... value) {
            return toCustomReports(Lists.newArrayList(value));
        }

        private User.UserBuilder toDirectReports(final List<User> value) {
            toDirectReports.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>directReports</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder directReports(User... value) {
            return toDirectReports(Lists.newArrayList(value));
        }

        private User.UserBuilder toHr(final User value) {
            toHr = value;
            return this;
        }

        /**
         * Navigation property <b>hr</b> for <b>User</b> to single <b>User</b>.
         * 
         * @param value
         *     The User to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder hr(final User value) {
            return toHr(value);
        }

        private User.UserBuilder toHrReports(final List<User> value) {
            toHrReports.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>hrReports</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder hrReports(User... value) {
            return toHrReports(Lists.newArrayList(value));
        }

        private User.UserBuilder toImpactOfLossNav(final PicklistOption value) {
            toImpactOfLossNav = value;
            return this;
        }

        /**
         * Navigation property <b>impactOfLossNav</b> for <b>User</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder impactOfLossNav(final PicklistOption value) {
            return toImpactOfLossNav(value);
        }

        private User.UserBuilder toManager(final User value) {
            toManager = value;
            return this;
        }

        /**
         * Navigation property <b>manager</b> for <b>User</b> to single <b>User</b>.
         * 
         * @param value
         *     The User to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder manager(final User value) {
            return toManager(value);
        }

        private User.UserBuilder toMatrixManager(final List<User> value) {
            toMatrixManager.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>matrixManager</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder matrixManager(User... value) {
            return toMatrixManager(Lists.newArrayList(value));
        }

        private User.UserBuilder toMatrixReports(final List<User> value) {
            toMatrixReports.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>matrixReports</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder matrixReports(User... value) {
            return toMatrixReports(Lists.newArrayList(value));
        }

        private User.UserBuilder toProxy(final List<User> value) {
            toProxy.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>proxy</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder proxy(User... value) {
            return toProxy(Lists.newArrayList(value));
        }

        private User.UserBuilder toReasonForLeavingNav(final PicklistOption value) {
            toReasonForLeavingNav = value;
            return this;
        }

        /**
         * Navigation property <b>reasonForLeavingNav</b> for <b>User</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder reasonForLeavingNav(final PicklistOption value) {
            return toReasonForLeavingNav(value);
        }

        private User.UserBuilder toRiskOfLossNav(final PicklistOption value) {
            toRiskOfLossNav = value;
            return this;
        }

        /**
         * Navigation property <b>riskOfLossNav</b> for <b>User</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder riskOfLossNav(final PicklistOption value) {
            return toRiskOfLossNav(value);
        }

        private User.UserBuilder toSecondManager(final User value) {
            toSecondManager = value;
            return this;
        }

        /**
         * Navigation property <b>secondManager</b> for <b>User</b> to single <b>User</b>.
         * 
         * @param value
         *     The User to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder secondManager(final User value) {
            return toSecondManager(value);
        }

        private User.UserBuilder toSecondReports(final List<User> value) {
            toSecondReports.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>secondReports</b> for <b>User</b> to multiple <b>User</b>.
         * 
         * @param value
         *     The Users to build this User with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public User.UserBuilder secondReports(User... value) {
            return toSecondReports(Lists.newArrayList(value));
        }

    }

}
