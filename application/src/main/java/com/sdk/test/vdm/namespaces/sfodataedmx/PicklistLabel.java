
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import com.sdk.test.vdm.namespaces.sfodataedmx.field.PicklistLabelField;
import com.sdk.test.vdm.namespaces.sfodataedmx.link.PicklistLabelOneToOneLink;
import com.sdk.test.vdm.namespaces.sfodataedmx.selectable.PicklistLabelSelectable;
import com.sdk.test.vdm.services.SFODataEdmxService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>PicklistLabel</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class PicklistLabel
    extends VdmEntity<PicklistLabel>
{

    /**
     * Selector for all available fields of PicklistLabel.
     * 
     */
    public final static PicklistLabelSelectable ALL_FIELDS = new PicklistLabelSelectable() {


        @Nonnull
        @Override
        public String getFieldName() {
            return "*";
        }

        @Nonnull
        @Override
        public List<String> getSelections() {
            return Collections.singletonList("*");
        }

    }
    ;
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private Long id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static PicklistLabelField<Long> ID = new PicklistLabelField<Long>("id");
    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>label</b></p>
     * 
     * @return
     *     The label contained in this entity.
     */
    @SerializedName("label")
    @JsonProperty("label")
    @Nullable
    @ODataField(odataName = "label")
    private String label;
    /**
     * Use with available fluent helpers to apply the <b>label</b> field to query operations.
     * 
     */
    public final static PicklistLabelField<String> LABEL = new PicklistLabelField<String>("label");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 32 <p>Original property name from the Odata EDM: <b>locale</b></p>
     * 
     * @return
     *     The locale contained in this entity.
     */
    @Key
    @SerializedName("locale")
    @JsonProperty("locale")
    @Nullable
    @ODataField(odataName = "locale")
    private String locale;
    /**
     * Use with available fluent helpers to apply the <b>locale</b> field to query operations.
     * 
     */
    public final static PicklistLabelField<String> LOCALE = new PicklistLabelField<String>("locale");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>optionId</b></p>
     * 
     * @return
     *     The optionId contained in this entity.
     */
    @Key
    @SerializedName("optionId")
    @JsonProperty("optionId")
    @Nullable
    @ODataField(odataName = "optionId")
    private Long optionId;
    /**
     * Use with available fluent helpers to apply the <b>optionId</b> field to query operations.
     * 
     */
    public final static PicklistLabelField<Long> OPTION_ID = new PicklistLabelField<Long>("optionId");
    /**
     * Navigation property <b>picklistOption</b> for <b>PicklistLabel</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("picklistOption")
    @JsonProperty("picklistOption")
    @ODataField(odataName = "picklistOption")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toPicklistOption;
    /**
     * Use with available fluent helpers to apply the <b>picklistOption</b> navigation property to query operations.
     * 
     */
    public final static PicklistLabelOneToOneLink<PicklistOption> TO_PICKLIST_OPTION = new PicklistLabelOneToOneLink<PicklistOption>("picklistOption");

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<PicklistLabel> getType() {
        return PicklistLabel.class;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final Long id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Nullable, Maximum length: 255 <p>Original property name from the Odata EDM: <b>label</b></p>
     * 
     * @param label
     *     The label to set.
     */
    public void setLabel(
        @Nullable
        final String label) {
        rememberChangedField("label", this.label);
        this.label = label;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 32 <p>Original property name from the Odata EDM: <b>locale</b></p>
     * 
     * @param locale
     *     The locale to set.
     */
    public void setLocale(
        @Nullable
        final String locale) {
        rememberChangedField("locale", this.locale);
        this.locale = locale;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>optionId</b></p>
     * 
     * @param optionId
     *     The optionId to set.
     */
    public void setOptionId(
        @Nullable
        final Long optionId) {
        rememberChangedField("optionId", this.optionId);
        this.optionId = optionId;
    }

    @Override
    protected String getEntityCollection() {
        return "PicklistLabel";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("locale", getLocale());
        result.put("optionId", getOptionId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("id", getId());
        values.put("label", getLabel());
        values.put("locale", getLocale());
        values.put("optionId", getOptionId());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((Long) value));
                }
            }
            if (values.containsKey("label")) {
                final Object value = values.remove("label");
                if ((value == null)||(!value.equals(getLabel()))) {
                    setLabel(((String) value));
                }
            }
            if (values.containsKey("locale")) {
                final Object value = values.remove("locale");
                if ((value == null)||(!value.equals(getLocale()))) {
                    setLocale(((String) value));
                }
            }
            if (values.containsKey("optionId")) {
                final Object value = values.remove("optionId");
                if ((value == null)||(!value.equals(getOptionId()))) {
                    setOptionId(((Long) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("picklistOption")) {
                final Object value = (values).remove("picklistOption");
                if (value instanceof Map) {
                    if (toPicklistOption == null) {
                        toPicklistOption = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toPicklistOption.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >PicklistLabelField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new PicklistLabelField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >PicklistLabelField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new PicklistLabelField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return SFODataEdmxService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toPicklistOption!= null) {
            (values).put("picklistOption", toPicklistOption);
        }
        return values;
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>picklistOption</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchPicklistOption()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("locale=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(locale));
        odataResourceUrl.append(",optionId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(optionId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("picklistOption");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>picklistOption</b>.
     * <p>
     * If the navigation property <b>picklistOption</b> of a queried <b>PicklistLabel</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getPicklistOptionOrFetch()
        throws ODataException
    {
        if (toPicklistOption == null) {
            toPicklistOption = fetchPicklistOption();
        }
        return toPicklistOption;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>picklistOption</b>.
     * <p>
     * If the navigation property for an entity <b>PicklistLabel</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>picklistOption</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getPicklistOptionIfPresent() {
        return Option.of(toPicklistOption);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>picklistOption</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setPicklistOption(final PicklistOption value) {
        toPicklistOption = value;
    }


    /**
     * Helper class to allow for fluent creation of PicklistLabel instances.
     * 
     */
    public final static class PicklistLabelBuilder {

        private PicklistOption toPicklistOption;

        private PicklistLabel.PicklistLabelBuilder toPicklistOption(final PicklistOption value) {
            toPicklistOption = value;
            return this;
        }

        /**
         * Navigation property <b>picklistOption</b> for <b>PicklistLabel</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this PicklistLabel with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public PicklistLabel.PicklistLabelBuilder picklistOption(final PicklistOption value) {
            return toPicklistOption(value);
        }

    }

}
