
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmComplex;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;


/**
 * <p>Original complex type name from the Odata EDM: <b>DynamicGroupUserBean</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class DynamicGroupUserBean
    extends VdmComplex<DynamicGroupUserBean>
{

    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>firstName</b></p>
     * 
     * @param firstName
     *     
     */
    @SerializedName("firstName")
    @JsonProperty("firstName")
    @Nullable
    @ODataField(odataName = "firstName")
    private String firstName;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>lastName</b></p>
     * 
     * @param lastName
     *     
     */
    @SerializedName("lastName")
    @JsonProperty("lastName")
    @Nullable
    @ODataField(odataName = "lastName")
    private String lastName;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>middleName</b></p>
     * 
     * @param middleName
     *     
     */
    @SerializedName("middleName")
    @JsonProperty("middleName")
    @Nullable
    @ODataField(odataName = "middleName")
    private String middleName;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>userId</b></p>
     * 
     * @param userId
     *     
     */
    @SerializedName("userId")
    @JsonProperty("userId")
    @Nullable
    @ODataField(odataName = "userId")
    private String userId;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>userName</b></p>
     * 
     * @param userName
     *     
     */
    @SerializedName("userName")
    @JsonProperty("userName")
    @Nullable
    @ODataField(odataName = "userName")
    private String userName;

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<DynamicGroupUserBean> getType() {
        return DynamicGroupUserBean.class;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("firstName", getFirstName());
        values.put("lastName", getLastName());
        values.put("middleName", getMiddleName());
        values.put("userId", getUserId());
        values.put("userName", getUserName());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("firstName")) {
                final Object value = values.remove("firstName");
                if ((value == null)||(!value.equals(getFirstName()))) {
                    setFirstName(((String) value));
                }
            }
            if (values.containsKey("lastName")) {
                final Object value = values.remove("lastName");
                if ((value == null)||(!value.equals(getLastName()))) {
                    setLastName(((String) value));
                }
            }
            if (values.containsKey("middleName")) {
                final Object value = values.remove("middleName");
                if ((value == null)||(!value.equals(getMiddleName()))) {
                    setMiddleName(((String) value));
                }
            }
            if (values.containsKey("userId")) {
                final Object value = values.remove("userId");
                if ((value == null)||(!value.equals(getUserId()))) {
                    setUserId(((String) value));
                }
            }
            if (values.containsKey("userName")) {
                final Object value = values.remove("userName");
                if ((value == null)||(!value.equals(getUserName()))) {
                    setUserName(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
        }
        super.fromMap(values);
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        return result;
    }

}
