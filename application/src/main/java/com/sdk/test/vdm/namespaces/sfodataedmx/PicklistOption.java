
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import com.sdk.test.vdm.namespaces.sfodataedmx.field.PicklistOptionField;
import com.sdk.test.vdm.namespaces.sfodataedmx.link.PicklistOptionLink;
import com.sdk.test.vdm.namespaces.sfodataedmx.link.PicklistOptionOneToOneLink;
import com.sdk.test.vdm.namespaces.sfodataedmx.selectable.PicklistOptionSelectable;
import com.sdk.test.vdm.services.SFODataEdmxService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>PicklistOption</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class PicklistOption
    extends VdmEntity<PicklistOption>
{

    /**
     * Selector for all available fields of PicklistOption.
     * 
     */
    public final static PicklistOptionSelectable ALL_FIELDS = new PicklistOptionSelectable() {


        @Nonnull
        @Override
        public String getFieldName() {
            return "*";
        }

        @Nonnull
        @Override
        public List<String> getSelections() {
            return Collections.singletonList("*");
        }

    }
    ;
    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>externalCode</b></p>
     * 
     * @return
     *     The externalCode contained in this entity.
     */
    @SerializedName("externalCode")
    @JsonProperty("externalCode")
    @Nullable
    @ODataField(odataName = "externalCode")
    private String externalCode;
    /**
     * Use with available fluent helpers to apply the <b>externalCode</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<String> EXTERNAL_CODE = new PicklistOptionField<String>("externalCode");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @return
     *     The id contained in this entity.
     */
    @Key
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private Long id;
    /**
     * Use with available fluent helpers to apply the <b>id</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<Long> ID = new PicklistOptionField<Long>("id");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>localeLabel</b></p>
     * 
     * @return
     *     The localeLabel contained in this entity.
     */
    @SerializedName("localeLabel")
    @JsonProperty("localeLabel")
    @Nullable
    @ODataField(odataName = "localeLabel")
    private String localeLabel;
    /**
     * Use with available fluent helpers to apply the <b>localeLabel</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<String> LOCALE_LABEL = new PicklistOptionField<String>("localeLabel");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>maxValue</b></p>
     * 
     * @return
     *     The maxValue contained in this entity.
     */
    @SerializedName("maxValue")
    @JsonProperty("maxValue")
    @Nullable
    @ODataField(odataName = "maxValue")
    private Double maxValue;
    /**
     * Use with available fluent helpers to apply the <b>maxValue</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<Double> MAX_VALUE = new PicklistOptionField<Double>("maxValue");
    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>mdfExternalCode</b></p>
     * 
     * @return
     *     The mdfExternalCode contained in this entity.
     */
    @SerializedName("mdfExternalCode")
    @JsonProperty("mdfExternalCode")
    @Nullable
    @ODataField(odataName = "mdfExternalCode")
    private String mdfExternalCode;
    /**
     * Use with available fluent helpers to apply the <b>mdfExternalCode</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<String> MDF_EXTERNAL_CODE = new PicklistOptionField<String>("mdfExternalCode");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>minValue</b></p>
     * 
     * @return
     *     The minValue contained in this entity.
     */
    @SerializedName("minValue")
    @JsonProperty("minValue")
    @Nullable
    @ODataField(odataName = "minValue")
    private Double minValue;
    /**
     * Use with available fluent helpers to apply the <b>minValue</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<Double> MIN_VALUE = new PicklistOptionField<Double>("minValue");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>optionValue</b></p>
     * 
     * @return
     *     The optionValue contained in this entity.
     */
    @SerializedName("optionValue")
    @JsonProperty("optionValue")
    @Nullable
    @ODataField(odataName = "optionValue")
    private Double optionValue;
    /**
     * Use with available fluent helpers to apply the <b>optionValue</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<Double> OPTION_VALUE = new PicklistOptionField<Double>("optionValue");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>sortOrder</b></p>
     * 
     * @return
     *     The sortOrder contained in this entity.
     */
    @SerializedName("sortOrder")
    @JsonProperty("sortOrder")
    @Nullable
    @ODataField(odataName = "sortOrder")
    private Integer sortOrder;
    /**
     * Use with available fluent helpers to apply the <b>sortOrder</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<Integer> SORT_ORDER = new PicklistOptionField<Integer>("sortOrder");
    /**
     * Constraints: Nullable, Maximum length: 9 <p>Original property name from the Odata EDM: <b>status</b></p>
     * 
     * @return
     *     The status contained in this entity.
     */
    @SerializedName("status")
    @JsonProperty("status")
    @Nullable
    @ODataField(odataName = "status")
    private String status;
    /**
     * Use with available fluent helpers to apply the <b>status</b> field to query operations.
     * 
     */
    public final static PicklistOptionField<String> STATUS = new PicklistOptionField<String>("status");
    /**
     * Navigation property <b>childPicklistOptions</b> for <b>PicklistOption</b> to multiple <b>PicklistOption</b>.
     * 
     */
    @SerializedName("childPicklistOptions")
    @JsonProperty("childPicklistOptions")
    @ODataField(odataName = "childPicklistOptions")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<PicklistOption> toChildPicklistOptions;
    /**
     * Navigation property <b>parentPicklistOption</b> for <b>PicklistOption</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("parentPicklistOption")
    @JsonProperty("parentPicklistOption")
    @ODataField(odataName = "parentPicklistOption")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toParentPicklistOption;
    /**
     * Navigation property <b>picklistLabels</b> for <b>PicklistOption</b> to multiple <b>PicklistLabel</b>.
     * 
     */
    @SerializedName("picklistLabels")
    @JsonProperty("picklistLabels")
    @ODataField(odataName = "picklistLabels")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<PicklistLabel> toPicklistLabels;
    /**
     * Use with available fluent helpers to apply the <b>childPicklistOptions</b> navigation property to query operations.
     * 
     */
    public final static PicklistOptionLink<PicklistOption> TO_CHILD_PICKLIST_OPTIONS = new PicklistOptionLink<PicklistOption>("childPicklistOptions");
    /**
     * Use with available fluent helpers to apply the <b>parentPicklistOption</b> navigation property to query operations.
     * 
     */
    public final static PicklistOptionOneToOneLink<PicklistOption> TO_PARENT_PICKLIST_OPTION = new PicklistOptionOneToOneLink<PicklistOption>("parentPicklistOption");
    /**
     * Use with available fluent helpers to apply the <b>picklistLabels</b> navigation property to query operations.
     * 
     */
    public final static PicklistOptionLink<PicklistLabel> TO_PICKLIST_LABELS = new PicklistOptionLink<PicklistLabel>("picklistLabels");

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<PicklistOption> getType() {
        return PicklistOption.class;
    }

    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>externalCode</b></p>
     * 
     * @param externalCode
     *     The externalCode to set.
     */
    public void setExternalCode(
        @Nullable
        final String externalCode) {
        rememberChangedField("externalCode", this.externalCode);
        this.externalCode = externalCode;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     The id to set.
     */
    public void setId(
        @Nullable
        final Long id) {
        rememberChangedField("id", this.id);
        this.id = id;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>localeLabel</b></p>
     * 
     * @param localeLabel
     *     The localeLabel to set.
     */
    public void setLocaleLabel(
        @Nullable
        final String localeLabel) {
        rememberChangedField("localeLabel", this.localeLabel);
        this.localeLabel = localeLabel;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>maxValue</b></p>
     * 
     * @param maxValue
     *     The maxValue to set.
     */
    public void setMaxValue(
        @Nullable
        final Double maxValue) {
        rememberChangedField("maxValue", this.maxValue);
        this.maxValue = maxValue;
    }

    /**
     * Constraints: Nullable, Maximum length: 256 <p>Original property name from the Odata EDM: <b>mdfExternalCode</b></p>
     * 
     * @param mdfExternalCode
     *     The mdfExternalCode to set.
     */
    public void setMdfExternalCode(
        @Nullable
        final String mdfExternalCode) {
        rememberChangedField("mdfExternalCode", this.mdfExternalCode);
        this.mdfExternalCode = mdfExternalCode;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>minValue</b></p>
     * 
     * @param minValue
     *     The minValue to set.
     */
    public void setMinValue(
        @Nullable
        final Double minValue) {
        rememberChangedField("minValue", this.minValue);
        this.minValue = minValue;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>optionValue</b></p>
     * 
     * @param optionValue
     *     The optionValue to set.
     */
    public void setOptionValue(
        @Nullable
        final Double optionValue) {
        rememberChangedField("optionValue", this.optionValue);
        this.optionValue = optionValue;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>sortOrder</b></p>
     * 
     * @param sortOrder
     *     The sortOrder to set.
     */
    public void setSortOrder(
        @Nullable
        final Integer sortOrder) {
        rememberChangedField("sortOrder", this.sortOrder);
        this.sortOrder = sortOrder;
    }

    /**
     * Constraints: Nullable, Maximum length: 9 <p>Original property name from the Odata EDM: <b>status</b></p>
     * 
     * @param status
     *     The status to set.
     */
    public void setStatus(
        @Nullable
        final String status) {
        rememberChangedField("status", this.status);
        this.status = status;
    }

    @Override
    protected String getEntityCollection() {
        return "PicklistOption";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("id", getId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("externalCode", getExternalCode());
        values.put("id", getId());
        values.put("localeLabel", getLocaleLabel());
        values.put("maxValue", getMaxValue());
        values.put("mdfExternalCode", getMdfExternalCode());
        values.put("minValue", getMinValue());
        values.put("optionValue", getOptionValue());
        values.put("sortOrder", getSortOrder());
        values.put("status", getStatus());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("externalCode")) {
                final Object value = values.remove("externalCode");
                if ((value == null)||(!value.equals(getExternalCode()))) {
                    setExternalCode(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((Long) value));
                }
            }
            if (values.containsKey("localeLabel")) {
                final Object value = values.remove("localeLabel");
                if ((value == null)||(!value.equals(getLocaleLabel()))) {
                    setLocaleLabel(((String) value));
                }
            }
            if (values.containsKey("maxValue")) {
                final Object value = values.remove("maxValue");
                if ((value == null)||(!value.equals(getMaxValue()))) {
                    setMaxValue(((Double) value));
                }
            }
            if (values.containsKey("mdfExternalCode")) {
                final Object value = values.remove("mdfExternalCode");
                if ((value == null)||(!value.equals(getMdfExternalCode()))) {
                    setMdfExternalCode(((String) value));
                }
            }
            if (values.containsKey("minValue")) {
                final Object value = values.remove("minValue");
                if ((value == null)||(!value.equals(getMinValue()))) {
                    setMinValue(((Double) value));
                }
            }
            if (values.containsKey("optionValue")) {
                final Object value = values.remove("optionValue");
                if ((value == null)||(!value.equals(getOptionValue()))) {
                    setOptionValue(((Double) value));
                }
            }
            if (values.containsKey("sortOrder")) {
                final Object value = values.remove("sortOrder");
                if ((value == null)||(!value.equals(getSortOrder()))) {
                    setSortOrder(((Integer) value));
                }
            }
            if (values.containsKey("status")) {
                final Object value = values.remove("status");
                if ((value == null)||(!value.equals(getStatus()))) {
                    setStatus(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("childPicklistOptions")) {
                final Object value = (values).remove("childPicklistOptions");
                if (value instanceof Iterable) {
                    if (toChildPicklistOptions == null) {
                        toChildPicklistOptions = Lists.newArrayList();
                    } else {
                        toChildPicklistOptions = Lists.newArrayList(toChildPicklistOptions);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        PicklistOption entity;
                        if (toChildPicklistOptions.size()>i) {
                            entity = toChildPicklistOptions.get(i);
                        } else {
                            entity = new PicklistOption();
                            toChildPicklistOptions.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("parentPicklistOption")) {
                final Object value = (values).remove("parentPicklistOption");
                if (value instanceof Map) {
                    if (toParentPicklistOption == null) {
                        toParentPicklistOption = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toParentPicklistOption.fromMap(inputMap);
                }
            }
            if ((values).containsKey("picklistLabels")) {
                final Object value = (values).remove("picklistLabels");
                if (value instanceof Iterable) {
                    if (toPicklistLabels == null) {
                        toPicklistLabels = Lists.newArrayList();
                    } else {
                        toPicklistLabels = Lists.newArrayList(toPicklistLabels);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        PicklistLabel entity;
                        if (toPicklistLabels.size()>i) {
                            entity = toPicklistLabels.get(i);
                        } else {
                            entity = new PicklistLabel();
                            toPicklistLabels.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >PicklistOptionField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new PicklistOptionField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >PicklistOptionField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new PicklistOptionField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return SFODataEdmxService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toChildPicklistOptions!= null) {
            (values).put("childPicklistOptions", toChildPicklistOptions);
        }
        if (toParentPicklistOption!= null) {
            (values).put("parentPicklistOption", toParentPicklistOption);
        }
        if (toPicklistLabels!= null) {
            (values).put("picklistLabels", toPicklistLabels);
        }
        return values;
    }

    /**
     * Fetches the <b>PicklistOption</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>childPicklistOptions</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>PicklistOption</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<PicklistOption> fetchChildPicklistOptions()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("childPicklistOptions");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<PicklistOption> entityList = result.asList(PicklistOption.class);
        for (PicklistOption entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entities (one to many). This corresponds to the OData navigation property <b>childPicklistOptions</b>.
     * <p>
     * If the navigation property <b>childPicklistOptions</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<PicklistOption> getChildPicklistOptionsOrFetch()
        throws ODataException
    {
        if (toChildPicklistOptions == null) {
            toChildPicklistOptions = fetchChildPicklistOptions();
        }
        return toChildPicklistOptions;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entities (one to many). This corresponds to the OData navigation property <b>childPicklistOptions</b>.
     * <p>
     * If the navigation property for an entity <b>PicklistOption</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>childPicklistOptions</b> is already loaded, the result will contain the <b>PicklistOption</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<PicklistOption>> getChildPicklistOptionsIfPresent() {
        return Option.of(toChildPicklistOptions);
    }

    /**
     * Overwrites the list of associated <b>PicklistOption</b> entities for the loaded navigation property <b>childPicklistOptions</b>.
     * <p>
     * If the navigation property <b>childPicklistOptions</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>PicklistOption</b> entities.
     */
    public void setChildPicklistOptions(
        @Nonnull
        final List<PicklistOption> value) {
        if (toChildPicklistOptions == null) {
            toChildPicklistOptions = Lists.newArrayList();
        }
        toChildPicklistOptions.clear();
        toChildPicklistOptions.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>PicklistOption</b> entities. This corresponds to the OData navigation property <b>childPicklistOptions</b>.
     * <p>
     * If the navigation property <b>childPicklistOptions</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>PicklistOption</b> entities.
     */
    public void addChildPicklistOptions(PicklistOption... entity) {
        if (toChildPicklistOptions == null) {
            toChildPicklistOptions = Lists.newArrayList();
        }
        toChildPicklistOptions.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>parentPicklistOption</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchParentPicklistOption()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("parentPicklistOption");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>parentPicklistOption</b>.
     * <p>
     * If the navigation property <b>parentPicklistOption</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getParentPicklistOptionOrFetch()
        throws ODataException
    {
        if (toParentPicklistOption == null) {
            toParentPicklistOption = fetchParentPicklistOption();
        }
        return toParentPicklistOption;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>parentPicklistOption</b>.
     * <p>
     * If the navigation property for an entity <b>PicklistOption</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>parentPicklistOption</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getParentPicklistOptionIfPresent() {
        return Option.of(toParentPicklistOption);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>parentPicklistOption</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setParentPicklistOption(final PicklistOption value) {
        toParentPicklistOption = value;
    }

    /**
     * Fetches the <b>PicklistLabel</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>picklistLabels</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>PicklistLabel</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<PicklistLabel> fetchPicklistLabels()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistLabel.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("id=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(id));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("picklistLabels");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final List<PicklistLabel> entityList = result.asList(PicklistLabel.class);
        for (PicklistLabel entity: entityList) {
            entity.attachToService(getServicePathForFetch(), destination);
        }
        return entityList;
    }

    /**
     * Retrieval of associated <b>PicklistLabel</b> entities (one to many). This corresponds to the OData navigation property <b>picklistLabels</b>.
     * <p>
     * If the navigation property <b>picklistLabels</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistLabel</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<PicklistLabel> getPicklistLabelsOrFetch()
        throws ODataException
    {
        if (toPicklistLabels == null) {
            toPicklistLabels = fetchPicklistLabels();
        }
        return toPicklistLabels;
    }

    /**
     * Retrieval of associated <b>PicklistLabel</b> entities (one to many). This corresponds to the OData navigation property <b>picklistLabels</b>.
     * <p>
     * If the navigation property for an entity <b>PicklistOption</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>picklistLabels</b> is already loaded, the result will contain the <b>PicklistLabel</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<PicklistLabel>> getPicklistLabelsIfPresent() {
        return Option.of(toPicklistLabels);
    }

    /**
     * Overwrites the list of associated <b>PicklistLabel</b> entities for the loaded navigation property <b>picklistLabels</b>.
     * <p>
     * If the navigation property <b>picklistLabels</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>PicklistLabel</b> entities.
     */
    public void setPicklistLabels(
        @Nonnull
        final List<PicklistLabel> value) {
        if (toPicklistLabels == null) {
            toPicklistLabels = Lists.newArrayList();
        }
        toPicklistLabels.clear();
        toPicklistLabels.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>PicklistLabel</b> entities. This corresponds to the OData navigation property <b>picklistLabels</b>.
     * <p>
     * If the navigation property <b>picklistLabels</b> of a queried <b>PicklistOption</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>PicklistLabel</b> entities.
     */
    public void addPicklistLabels(PicklistLabel... entity) {
        if (toPicklistLabels == null) {
            toPicklistLabels = Lists.newArrayList();
        }
        toPicklistLabels.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of PicklistOption instances.
     * 
     */
    public final static class PicklistOptionBuilder {

        private List<PicklistOption> toChildPicklistOptions = Lists.newArrayList();
        private PicklistOption toParentPicklistOption;
        private List<PicklistLabel> toPicklistLabels = Lists.newArrayList();

        private PicklistOption.PicklistOptionBuilder toChildPicklistOptions(final List<PicklistOption> value) {
            toChildPicklistOptions.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>childPicklistOptions</b> for <b>PicklistOption</b> to multiple <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOptions to build this PicklistOption with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public PicklistOption.PicklistOptionBuilder childPicklistOptions(PicklistOption... value) {
            return toChildPicklistOptions(Lists.newArrayList(value));
        }

        private PicklistOption.PicklistOptionBuilder toParentPicklistOption(final PicklistOption value) {
            toParentPicklistOption = value;
            return this;
        }

        /**
         * Navigation property <b>parentPicklistOption</b> for <b>PicklistOption</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this PicklistOption with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public PicklistOption.PicklistOptionBuilder parentPicklistOption(final PicklistOption value) {
            return toParentPicklistOption(value);
        }

        private PicklistOption.PicklistOptionBuilder toPicklistLabels(final List<PicklistLabel> value) {
            toPicklistLabels.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>picklistLabels</b> for <b>PicklistOption</b> to multiple <b>PicklistLabel</b>.
         * 
         * @param value
         *     The PicklistLabels to build this PicklistOption with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public PicklistOption.PicklistOptionBuilder picklistLabels(PicklistLabel... value) {
            return toPicklistLabels(Lists.newArrayList(value));
        }

    }

}
