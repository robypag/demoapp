
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmComplex;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;


/**
 * <p>Original complex type name from the Odata EDM: <b>PendingDataAttributeBean</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class PendingDataAttributeBean
    extends VdmComplex<PendingDataAttributeBean>
{

    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>entityName</b></p>
     * 
     * @param entityName
     *     
     */
    @SerializedName("entityName")
    @JsonProperty("entityName")
    @Nullable
    @ODataField(odataName = "entityName")
    private String entityName;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>fieldId</b></p>
     * 
     * @param fieldId
     *     
     */
    @SerializedName("fieldId")
    @JsonProperty("fieldId")
    @Nullable
    @ODataField(odataName = "fieldId")
    private String fieldId;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>fieldName</b></p>
     * 
     * @param fieldName
     *     
     */
    @SerializedName("fieldName")
    @JsonProperty("fieldName")
    @Nullable
    @ODataField(odataName = "fieldName")
    private String fieldName;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>id</b></p>
     * 
     * @param id
     *     
     */
    @SerializedName("id")
    @JsonProperty("id")
    @Nullable
    @ODataField(odataName = "id")
    private String id;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>label</b></p>
     * 
     * @param label
     *     
     */
    @SerializedName("label")
    @JsonProperty("label")
    @Nullable
    @ODataField(odataName = "label")
    private String label;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>newValue</b></p>
     * 
     * @param newValue
     *     
     */
    @SerializedName("newValue")
    @JsonProperty("newValue")
    @Nullable
    @ODataField(odataName = "newValue")
    private String newValue;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>oldValue</b></p>
     * 
     * @param oldValue
     *     
     */
    @SerializedName("oldValue")
    @JsonProperty("oldValue")
    @Nullable
    @ODataField(odataName = "oldValue")
    private String oldValue;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>payComponents</b></p>
     * 
     * @param payComponents
     *     
     */
    @SerializedName("payComponents")
    @JsonProperty("payComponents")
    @Nullable
    @ODataField(odataName = "payComponents")
    private ChangeDataBean payComponents;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>type</b></p>
     * 
     * @param type_2
     *     
     */
    @SerializedName("type")
    @JsonProperty("type")
    @Nullable
    @ODataField(odataName = "type")
    private String type_2;

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<PendingDataAttributeBean> getType() {
        return PendingDataAttributeBean.class;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("entityName", getEntityName());
        values.put("fieldId", getFieldId());
        values.put("fieldName", getFieldName());
        values.put("id", getId());
        values.put("label", getLabel());
        values.put("newValue", getNewValue());
        values.put("oldValue", getOldValue());
        values.put("payComponents", getPayComponents());
        values.put("type", getType_2());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("entityName")) {
                final Object value = values.remove("entityName");
                if ((value == null)||(!value.equals(getEntityName()))) {
                    setEntityName(((String) value));
                }
            }
            if (values.containsKey("fieldId")) {
                final Object value = values.remove("fieldId");
                if ((value == null)||(!value.equals(getFieldId()))) {
                    setFieldId(((String) value));
                }
            }
            if (values.containsKey("fieldName")) {
                final Object value = values.remove("fieldName");
                if ((value == null)||(!value.equals(getFieldName()))) {
                    setFieldName(((String) value));
                }
            }
            if (values.containsKey("id")) {
                final Object value = values.remove("id");
                if ((value == null)||(!value.equals(getId()))) {
                    setId(((String) value));
                }
            }
            if (values.containsKey("label")) {
                final Object value = values.remove("label");
                if ((value == null)||(!value.equals(getLabel()))) {
                    setLabel(((String) value));
                }
            }
            if (values.containsKey("newValue")) {
                final Object value = values.remove("newValue");
                if ((value == null)||(!value.equals(getNewValue()))) {
                    setNewValue(((String) value));
                }
            }
            if (values.containsKey("oldValue")) {
                final Object value = values.remove("oldValue");
                if ((value == null)||(!value.equals(getOldValue()))) {
                    setOldValue(((String) value));
                }
            }
            if (values.containsKey("type")) {
                final Object value = values.remove("type");
                if ((value == null)||(!value.equals(getType_2()))) {
                    setType_2(((String) value));
                }
            }
        }
        // structured properties
        {
            if (values.containsKey("payComponents")) {
                final Object value = values.remove("payComponents");
                if (value instanceof Map) {
                    if (getPayComponents() == null) {
                        setPayComponents(new ChangeDataBean());
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    getPayComponents().fromMap(inputMap);
                }
                if ((value == null)&&(getPayComponents()!= null)) {
                    setPayComponents(null);
                }
            }
        }
        // navigation properties
        {
        }
        super.fromMap(values);
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        return result;
    }

}
