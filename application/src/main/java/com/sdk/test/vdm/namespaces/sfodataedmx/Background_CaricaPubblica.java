
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpClientAccessor;
import com.sap.cloud.sdk.cloudplatform.connectivity.HttpDestinationProperties;
import com.sap.cloud.sdk.datamodel.odata.helper.ODataTypeValueSerializer;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.odatav2.connectivity.ODataException;
import com.sap.cloud.sdk.odatav2.connectivity.ODataExceptionType;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQuery;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryBuilder;
import com.sap.cloud.sdk.odatav2.connectivity.ODataQueryResult;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import com.sdk.test.vdm.namespaces.sfodataedmx.field.Background_CaricaPubblicaField;
import com.sdk.test.vdm.namespaces.sfodataedmx.link.Background_CaricaPubblicaOneToOneLink;
import com.sdk.test.vdm.namespaces.sfodataedmx.selectable.Background_CaricaPubblicaSelectable;
import com.sdk.test.vdm.services.SFODataEdmxService;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.apache.http.client.HttpClient;
import org.apache.olingo.odata2.api.edm.EdmSimpleTypeKind;


/**
 * <p>Original entity name from the Odata EDM: <b>Background_CaricaPubblica</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class Background_CaricaPubblica
    extends VdmEntity<Background_CaricaPubblica>
{

    /**
     * Selector for all available fields of Background_CaricaPubblica.
     * 
     */
    public final static Background_CaricaPubblicaSelectable ALL_FIELDS = new Background_CaricaPubblicaSelectable() {


        @Nonnull
        @Override
        public String getFieldName() {
            return "*";
        }

        @Nonnull
        @Override
        public List<String> getSelections() {
            return Collections.singletonList("*");
        }

    }
    ;
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>backgroundElementId</b></p>
     * 
     * @return
     *     The backgroundElementId contained in this entity.
     */
    @Key
    @SerializedName("backgroundElementId")
    @JsonProperty("backgroundElementId")
    @Nullable
    @ODataField(odataName = "backgroundElementId")
    private Long backgroundElementId;
    /**
     * Use with available fluent helpers to apply the <b>backgroundElementId</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<Long> BACKGROUND_ELEMENT_ID = new Background_CaricaPubblicaField<Long>("backgroundElementId");
    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>bgOrderPos</b></p>
     * 
     * @return
     *     The bgOrderPos contained in this entity.
     */
    @SerializedName("bgOrderPos")
    @JsonProperty("bgOrderPos")
    @Nullable
    @ODataField(odataName = "bgOrderPos")
    private Long bgOrderPos;
    /**
     * Use with available fluent helpers to apply the <b>bgOrderPos</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<Long> BG_ORDER_POS = new Background_CaricaPubblicaField<Long>("bgOrderPos");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>carica</b></p>
     * 
     * @return
     *     The carica contained in this entity.
     */
    @SerializedName("carica")
    @JsonProperty("carica")
    @Nullable
    @ODataField(odataName = "carica")
    private String carica;
    /**
     * Use with available fluent helpers to apply the <b>carica</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<String> CARICA = new Background_CaricaPubblicaField<String>("carica");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>endDate</b></p>
     * 
     * @return
     *     The endDate contained in this entity.
     */
    @SerializedName("endDate")
    @JsonProperty("endDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "endDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime endDate;
    /**
     * Use with available fluent helpers to apply the <b>endDate</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<LocalDateTime> END_DATE = new Background_CaricaPubblicaField<LocalDateTime>("endDate");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>ente</b></p>
     * 
     * @return
     *     The ente contained in this entity.
     */
    @SerializedName("ente")
    @JsonProperty("ente")
    @Nullable
    @ODataField(odataName = "ente")
    private String ente;
    /**
     * Use with available fluent helpers to apply the <b>ente</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<String> ENTE = new Background_CaricaPubblicaField<String>("ente");
    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>lastModifiedDate</b></p>
     * 
     * @return
     *     The lastModifiedDate contained in this entity.
     */
    @SerializedName("lastModifiedDate")
    @JsonProperty("lastModifiedDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonZonedDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeAdapter.class)
    @ODataField(odataName = "lastModifiedDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ZonedDateTimeCalendarConverter.class)
    private ZonedDateTime lastModifiedDate;
    /**
     * Use with available fluent helpers to apply the <b>lastModifiedDate</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<ZonedDateTime> LAST_MODIFIED_DATE = new Background_CaricaPubblicaField<ZonedDateTime>("lastModifiedDate");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>startDate</b></p>
     * 
     * @return
     *     The startDate contained in this entity.
     */
    @SerializedName("startDate")
    @JsonProperty("startDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "startDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime startDate;
    /**
     * Use with available fluent helpers to apply the <b>startDate</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<LocalDateTime> START_DATE = new Background_CaricaPubblicaField<LocalDateTime>("startDate");
    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>ufficio</b></p>
     * 
     * @return
     *     The ufficio contained in this entity.
     */
    @SerializedName("ufficio")
    @JsonProperty("ufficio")
    @Nullable
    @ODataField(odataName = "ufficio")
    private String ufficio;
    /**
     * Use with available fluent helpers to apply the <b>ufficio</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<String> UFFICIO = new Background_CaricaPubblicaField<String>("ufficio");
    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>userId</b></p>
     * 
     * @return
     *     The userId contained in this entity.
     */
    @Key
    @SerializedName("userId")
    @JsonProperty("userId")
    @Nullable
    @ODataField(odataName = "userId")
    private String userId;
    /**
     * Use with available fluent helpers to apply the <b>userId</b> field to query operations.
     * 
     */
    public final static Background_CaricaPubblicaField<String> USER_ID = new Background_CaricaPubblicaField<String>("userId");
    /**
     * Navigation property <b>caricaNav</b> for <b>Background_CaricaPubblica</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("caricaNav")
    @JsonProperty("caricaNav")
    @ODataField(odataName = "caricaNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toCaricaNav;
    /**
     * Navigation property <b>enteNav</b> for <b>Background_CaricaPubblica</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("enteNav")
    @JsonProperty("enteNav")
    @ODataField(odataName = "enteNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toEnteNav;
    /**
     * Navigation property <b>ufficioNav</b> for <b>Background_CaricaPubblica</b> to single <b>PicklistOption</b>.
     * 
     */
    @SerializedName("ufficioNav")
    @JsonProperty("ufficioNav")
    @ODataField(odataName = "ufficioNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private PicklistOption toUfficioNav;
    /**
     * Navigation property <b>userIdNav</b> for <b>Background_CaricaPubblica</b> to single <b>User</b>.
     * 
     */
    @SerializedName("userIdNav")
    @JsonProperty("userIdNav")
    @ODataField(odataName = "userIdNav")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private User toUserIdNav;
    /**
     * Use with available fluent helpers to apply the <b>caricaNav</b> navigation property to query operations.
     * 
     */
    public final static Background_CaricaPubblicaOneToOneLink<PicklistOption> TO_CARICA_NAV = new Background_CaricaPubblicaOneToOneLink<PicklistOption>("caricaNav");
    /**
     * Use with available fluent helpers to apply the <b>enteNav</b> navigation property to query operations.
     * 
     */
    public final static Background_CaricaPubblicaOneToOneLink<PicklistOption> TO_ENTE_NAV = new Background_CaricaPubblicaOneToOneLink<PicklistOption>("enteNav");
    /**
     * Use with available fluent helpers to apply the <b>ufficioNav</b> navigation property to query operations.
     * 
     */
    public final static Background_CaricaPubblicaOneToOneLink<PicklistOption> TO_UFFICIO_NAV = new Background_CaricaPubblicaOneToOneLink<PicklistOption>("ufficioNav");
    /**
     * Use with available fluent helpers to apply the <b>userIdNav</b> navigation property to query operations.
     * 
     */
    public final static Background_CaricaPubblicaOneToOneLink<User> TO_USER_ID_NAV = new Background_CaricaPubblicaOneToOneLink<User>("userIdNav");

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<Background_CaricaPubblica> getType() {
        return Background_CaricaPubblica.class;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>backgroundElementId</b></p>
     * 
     * @param backgroundElementId
     *     The backgroundElementId to set.
     */
    public void setBackgroundElementId(
        @Nullable
        final Long backgroundElementId) {
        rememberChangedField("backgroundElementId", this.backgroundElementId);
        this.backgroundElementId = backgroundElementId;
    }

    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>bgOrderPos</b></p>
     * 
     * @param bgOrderPos
     *     The bgOrderPos to set.
     */
    public void setBgOrderPos(
        @Nullable
        final Long bgOrderPos) {
        rememberChangedField("bgOrderPos", this.bgOrderPos);
        this.bgOrderPos = bgOrderPos;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>carica</b></p>
     * 
     * @param carica
     *     The carica to set.
     */
    public void setCarica(
        @Nullable
        final String carica) {
        rememberChangedField("carica", this.carica);
        this.carica = carica;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>endDate</b></p>
     * 
     * @param endDate
     *     The endDate to set.
     */
    public void setEndDate(
        @Nullable
        final LocalDateTime endDate) {
        rememberChangedField("endDate", this.endDate);
        this.endDate = endDate;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>ente</b></p>
     * 
     * @param ente
     *     The ente to set.
     */
    public void setEnte(
        @Nullable
        final String ente) {
        rememberChangedField("ente", this.ente);
        this.ente = ente;
    }

    /**
     * Constraints: Not nullable<p>Original property name from the Odata EDM: <b>lastModifiedDate</b></p>
     * 
     * @param lastModifiedDate
     *     The lastModifiedDate to set.
     */
    public void setLastModifiedDate(
        @Nullable
        final ZonedDateTime lastModifiedDate) {
        rememberChangedField("lastModifiedDate", this.lastModifiedDate);
        this.lastModifiedDate = lastModifiedDate;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>startDate</b></p>
     * 
     * @param startDate
     *     The startDate to set.
     */
    public void setStartDate(
        @Nullable
        final LocalDateTime startDate) {
        rememberChangedField("startDate", this.startDate);
        this.startDate = startDate;
    }

    /**
     * Constraints: Nullable<p>Original property name from the Odata EDM: <b>ufficio</b></p>
     * 
     * @param ufficio
     *     The ufficio to set.
     */
    public void setUfficio(
        @Nullable
        final String ufficio) {
        rememberChangedField("ufficio", this.ufficio);
        this.ufficio = ufficio;
    }

    /**
     * (Key Field) Constraints: Not nullable<p>Original property name from the Odata EDM: <b>userId</b></p>
     * 
     * @param userId
     *     The userId to set.
     */
    public void setUserId(
        @Nullable
        final String userId) {
        rememberChangedField("userId", this.userId);
        this.userId = userId;
    }

    @Override
    protected String getEntityCollection() {
        return "Background_CaricaPubblica";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("backgroundElementId", getBackgroundElementId());
        result.put("userId", getUserId());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("backgroundElementId", getBackgroundElementId());
        values.put("bgOrderPos", getBgOrderPos());
        values.put("carica", getCarica());
        values.put("endDate", getEndDate());
        values.put("ente", getEnte());
        values.put("lastModifiedDate", getLastModifiedDate());
        values.put("startDate", getStartDate());
        values.put("ufficio", getUfficio());
        values.put("userId", getUserId());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("backgroundElementId")) {
                final Object value = values.remove("backgroundElementId");
                if ((value == null)||(!value.equals(getBackgroundElementId()))) {
                    setBackgroundElementId(((Long) value));
                }
            }
            if (values.containsKey("bgOrderPos")) {
                final Object value = values.remove("bgOrderPos");
                if ((value == null)||(!value.equals(getBgOrderPos()))) {
                    setBgOrderPos(((Long) value));
                }
            }
            if (values.containsKey("carica")) {
                final Object value = values.remove("carica");
                if ((value == null)||(!value.equals(getCarica()))) {
                    setCarica(((String) value));
                }
            }
            if (values.containsKey("endDate")) {
                final Object value = values.remove("endDate");
                if ((value == null)||(!value.equals(getEndDate()))) {
                    setEndDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("ente")) {
                final Object value = values.remove("ente");
                if ((value == null)||(!value.equals(getEnte()))) {
                    setEnte(((String) value));
                }
            }
            if (values.containsKey("lastModifiedDate")) {
                final Object value = values.remove("lastModifiedDate");
                if ((value == null)||(!value.equals(getLastModifiedDate()))) {
                    setLastModifiedDate(((ZonedDateTime) value));
                }
            }
            if (values.containsKey("startDate")) {
                final Object value = values.remove("startDate");
                if ((value == null)||(!value.equals(getStartDate()))) {
                    setStartDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("ufficio")) {
                final Object value = values.remove("ufficio");
                if ((value == null)||(!value.equals(getUfficio()))) {
                    setUfficio(((String) value));
                }
            }
            if (values.containsKey("userId")) {
                final Object value = values.remove("userId");
                if ((value == null)||(!value.equals(getUserId()))) {
                    setUserId(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("caricaNav")) {
                final Object value = (values).remove("caricaNav");
                if (value instanceof Map) {
                    if (toCaricaNav == null) {
                        toCaricaNav = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toCaricaNav.fromMap(inputMap);
                }
            }
            if ((values).containsKey("enteNav")) {
                final Object value = (values).remove("enteNav");
                if (value instanceof Map) {
                    if (toEnteNav == null) {
                        toEnteNav = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toEnteNav.fromMap(inputMap);
                }
            }
            if ((values).containsKey("ufficioNav")) {
                final Object value = (values).remove("ufficioNav");
                if (value instanceof Map) {
                    if (toUfficioNav == null) {
                        toUfficioNav = new PicklistOption();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toUfficioNav.fromMap(inputMap);
                }
            }
            if ((values).containsKey("userIdNav")) {
                final Object value = (values).remove("userIdNav");
                if (value instanceof Map) {
                    if (toUserIdNav == null) {
                        toUserIdNav = new User();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toUserIdNav.fromMap(inputMap);
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >Background_CaricaPubblicaField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new Background_CaricaPubblicaField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >Background_CaricaPubblicaField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new Background_CaricaPubblicaField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public HttpDestinationProperties getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final HttpDestinationProperties destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return SFODataEdmxService.DEFAULT_SERVICE_PATH;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toCaricaNav!= null) {
            (values).put("caricaNav", toCaricaNav);
        }
        if (toEnteNav!= null) {
            (values).put("enteNav", toEnteNav);
        }
        if (toUfficioNav!= null) {
            (values).put("ufficioNav", toUfficioNav);
        }
        if (toUserIdNav!= null) {
            (values).put("userIdNav", toUserIdNav);
        }
        return values;
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>caricaNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchCaricaNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("backgroundElementId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(backgroundElementId));
        odataResourceUrl.append(",userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("caricaNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>caricaNav</b>.
     * <p>
     * If the navigation property <b>caricaNav</b> of a queried <b>Background_CaricaPubblica</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getCaricaNavOrFetch()
        throws ODataException
    {
        if (toCaricaNav == null) {
            toCaricaNav = fetchCaricaNav();
        }
        return toCaricaNav;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>caricaNav</b>.
     * <p>
     * If the navigation property for an entity <b>Background_CaricaPubblica</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>caricaNav</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getCaricaNavIfPresent() {
        return Option.of(toCaricaNav);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>caricaNav</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setCaricaNav(final PicklistOption value) {
        toCaricaNav = value;
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>enteNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchEnteNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("backgroundElementId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(backgroundElementId));
        odataResourceUrl.append(",userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("enteNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>enteNav</b>.
     * <p>
     * If the navigation property <b>enteNav</b> of a queried <b>Background_CaricaPubblica</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getEnteNavOrFetch()
        throws ODataException
    {
        if (toEnteNav == null) {
            toEnteNav = fetchEnteNav();
        }
        return toEnteNav;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>enteNav</b>.
     * <p>
     * If the navigation property for an entity <b>Background_CaricaPubblica</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>enteNav</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getEnteNavIfPresent() {
        return Option.of(toEnteNav);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>enteNav</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setEnteNav(final PicklistOption value) {
        toEnteNav = value;
    }

    /**
     * Fetches the <b>PicklistOption</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>ufficioNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>PicklistOption</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption fetchUfficioNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type PicklistOption.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("backgroundElementId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(backgroundElementId));
        odataResourceUrl.append(",userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("ufficioNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final PicklistOption entity = result.as(PicklistOption.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>ufficioNav</b>.
     * <p>
     * If the navigation property <b>ufficioNav</b> of a queried <b>Background_CaricaPubblica</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>PicklistOption</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public PicklistOption getUfficioNavOrFetch()
        throws ODataException
    {
        if (toUfficioNav == null) {
            toUfficioNav = fetchUfficioNav();
        }
        return toUfficioNav;
    }

    /**
     * Retrieval of associated <b>PicklistOption</b> entity (one to one). This corresponds to the OData navigation property <b>ufficioNav</b>.
     * <p>
     * If the navigation property for an entity <b>Background_CaricaPubblica</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>ufficioNav</b> is already loaded, the result will contain the <b>PicklistOption</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<PicklistOption> getUfficioNavIfPresent() {
        return Option.of(toUfficioNav);
    }

    /**
     * Overwrites the associated <b>PicklistOption</b> entity for the loaded navigation property <b>ufficioNav</b>.
     * 
     * @param value
     *     New <b>PicklistOption</b> entity.
     */
    public void setUfficioNav(final PicklistOption value) {
        toUfficioNav = value;
    }

    /**
     * Fetches the <b>User</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>userIdNav</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>User</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User fetchUserIdNav()
        throws ODataException
    {
        final HttpDestinationProperties destination = getDestinationForFetch();
        if (destination == null) {
            throw new ODataException(ODataExceptionType.OTHER, "Failed to fetch related objects of type User.", new IllegalStateException("Unable to execute OData query. The entity was created locally without an assigned HttpDestination. This method is applicable only on entities which were retrieved or created using the OData VDM."));
        }
        final StringBuilder odataResourceUrl = new StringBuilder(getEntityCollection());
        odataResourceUrl.append("(");
        odataResourceUrl.append("backgroundElementId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.Int64).toUri(backgroundElementId));
        odataResourceUrl.append(",userId=");
        odataResourceUrl.append(ODataTypeValueSerializer.of(EdmSimpleTypeKind.String).toUri(userId));
        odataResourceUrl.append(")/");
        odataResourceUrl.append("userIdNav");
        final ODataQueryBuilder builder = ODataQueryBuilder.withEntity(getServicePathForFetch(), odataResourceUrl.toString()).withoutMetadata();
        final ODataQuery query = builder.build();
        final HttpClient httpClient = HttpClientAccessor.getHttpClient(destination);
        final ODataQueryResult result = query.execute(httpClient);
        final User entity = result.as(User.class);
        entity.attachToService(getServicePathForFetch(), destination);
        return entity;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>userIdNav</b>.
     * <p>
     * If the navigation property <b>userIdNav</b> of a queried <b>Background_CaricaPubblica</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>User</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public User getUserIdNavOrFetch()
        throws ODataException
    {
        if (toUserIdNav == null) {
            toUserIdNav = fetchUserIdNav();
        }
        return toUserIdNav;
    }

    /**
     * Retrieval of associated <b>User</b> entity (one to one). This corresponds to the OData navigation property <b>userIdNav</b>.
     * <p>
     * If the navigation property for an entity <b>Background_CaricaPubblica</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>userIdNav</b> is already loaded, the result will contain the <b>User</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<User> getUserIdNavIfPresent() {
        return Option.of(toUserIdNav);
    }

    /**
     * Overwrites the associated <b>User</b> entity for the loaded navigation property <b>userIdNav</b>.
     * 
     * @param value
     *     New <b>User</b> entity.
     */
    public void setUserIdNav(final User value) {
        toUserIdNav = value;
    }


    /**
     * Helper class to allow for fluent creation of Background_CaricaPubblica instances.
     * 
     */
    public final static class Background_CaricaPubblicaBuilder {

        private PicklistOption toCaricaNav;
        private PicklistOption toEnteNav;
        private PicklistOption toUfficioNav;
        private User toUserIdNav;

        private Background_CaricaPubblica.Background_CaricaPubblicaBuilder toCaricaNav(final PicklistOption value) {
            toCaricaNav = value;
            return this;
        }

        /**
         * Navigation property <b>caricaNav</b> for <b>Background_CaricaPubblica</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this Background_CaricaPubblica with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Background_CaricaPubblica.Background_CaricaPubblicaBuilder caricaNav(final PicklistOption value) {
            return toCaricaNav(value);
        }

        private Background_CaricaPubblica.Background_CaricaPubblicaBuilder toEnteNav(final PicklistOption value) {
            toEnteNav = value;
            return this;
        }

        /**
         * Navigation property <b>enteNav</b> for <b>Background_CaricaPubblica</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this Background_CaricaPubblica with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Background_CaricaPubblica.Background_CaricaPubblicaBuilder enteNav(final PicklistOption value) {
            return toEnteNav(value);
        }

        private Background_CaricaPubblica.Background_CaricaPubblicaBuilder toUfficioNav(final PicklistOption value) {
            toUfficioNav = value;
            return this;
        }

        /**
         * Navigation property <b>ufficioNav</b> for <b>Background_CaricaPubblica</b> to single <b>PicklistOption</b>.
         * 
         * @param value
         *     The PicklistOption to build this Background_CaricaPubblica with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Background_CaricaPubblica.Background_CaricaPubblicaBuilder ufficioNav(final PicklistOption value) {
            return toUfficioNav(value);
        }

        private Background_CaricaPubblica.Background_CaricaPubblicaBuilder toUserIdNav(final User value) {
            toUserIdNav = value;
            return this;
        }

        /**
         * Navigation property <b>userIdNav</b> for <b>Background_CaricaPubblica</b> to single <b>User</b>.
         * 
         * @param value
         *     The User to build this Background_CaricaPubblica with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public Background_CaricaPubblica.Background_CaricaPubblicaBuilder userIdNav(final User value) {
            return toUserIdNav(value);
        }

    }

}
