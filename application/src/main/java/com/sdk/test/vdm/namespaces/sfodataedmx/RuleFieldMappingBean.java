
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 3.15.1
 */

package com.sdk.test.vdm.namespaces.sfodataedmx;

import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmComplex;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;


/**
 * RuleFieldMappingBean<p></p><p>Original complex type name from the Odata EDM: <b>RuleFieldMappingBean</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class RuleFieldMappingBean
    extends VdmComplex<RuleFieldMappingBean>
{

    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>fieldName</b></p>
     * 
     * @param fieldName
     *     
     */
    @SerializedName("fieldName")
    @JsonProperty("fieldName")
    @Nullable
    @ODataField(odataName = "fieldName")
    private String fieldName;
    /**
     * Constraints: Nullable<p>Original property from the Odata EDM: <b>fieldValue</b></p>
     * 
     * @param fieldValue
     *     
     */
    @SerializedName("fieldValue")
    @JsonProperty("fieldValue")
    @Nullable
    @ODataField(odataName = "fieldValue")
    private String fieldValue;

    /**
     * {@inheritDoc}
     * 
     */
    @Nonnull
    @Override
    public Class<RuleFieldMappingBean> getType() {
        return RuleFieldMappingBean.class;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("fieldName", getFieldName());
        values.put("fieldValue", getFieldValue());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("fieldName")) {
                final Object value = values.remove("fieldName");
                if ((value == null)||(!value.equals(getFieldName()))) {
                    setFieldName(((String) value));
                }
            }
            if (values.containsKey("fieldValue")) {
                final Object value = values.remove("fieldValue");
                if ((value == null)||(!value.equals(getFieldValue()))) {
                    setFieldValue(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
        }
        super.fromMap(values);
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        return result;
    }

}
